{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/img1.png","path":"uploads/img1.png","modified":0,"renderable":0},{"_id":"source/uploads/img10.png","path":"uploads/img10.png","modified":0,"renderable":0},{"_id":"source/uploads/img11.png","path":"uploads/img11.png","modified":0,"renderable":0},{"_id":"source/uploads/img2.png","path":"uploads/img2.png","modified":0,"renderable":0},{"_id":"source/uploads/img3.png","path":"uploads/img3.png","modified":0,"renderable":0},{"_id":"source/uploads/img4.png","path":"uploads/img4.png","modified":0,"renderable":0},{"_id":"source/uploads/img5.png","path":"uploads/img5.png","modified":0,"renderable":0},{"_id":"source/uploads/img6.png","path":"uploads/img6.png","modified":0,"renderable":0},{"_id":"source/uploads/img12.png","path":"uploads/img12.png","modified":0,"renderable":0},{"_id":"source/uploads/img7.png","path":"uploads/img7.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/uploads/img9.png","path":"uploads/img9.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/uploads/img8.png","path":"uploads/img8.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"source/uploads/myIcon.jpeg","path":"uploads/myIcon.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1503475748000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1503475748000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1503475748000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1503482820000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1503475748000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1503475748000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1503475748000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1503475748000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1503475748000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1503475748000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1503475748000},{"_id":"themes/next/README.md","hash":"950ca6e9c0fa607d290a5b1fd883df44725b36b2","modified":1503475748000},{"_id":"themes/next/_config.yml","hash":"36fe3473631867a703d7cd701fb0a4aeec88564e","modified":1503563413000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1503475748000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1503475748000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1503475748000},{"_id":"source/_posts/CSS清浮动.md","hash":"1629fe7a203758c0473de43faffb6b1899b6a700","modified":1508485371000},{"_id":"source/_posts/github上搭建个人主页.md","hash":"73cf7da82b14c6a2e260c53574111e8a8ebdf8fe","modified":1508378575000},{"_id":"source/_posts/Nginx代理解决跨域的理解.md","hash":"a9aa23e70ad9935bdd6fecacb104a6cc4b8e8a6b","modified":1508378575000},{"_id":"source/_posts/读《javaScript高级程序设计－第6章》之封装类.md","hash":"b36ada260d5a1c56a8bb601c1c090485432a3d6e","modified":1508485371000},{"_id":"source/_posts/读《javaScript高级程序设计－第6章》之理解对象.md","hash":"1a0a04cfdb57d790bbf146c80970839248d9276e","modified":1508485371000},{"_id":"source/_posts/读《javaScript高级程序设计－第6章》之继承.md","hash":"ab0a19ed4ed997284953fc085070069608c4cc84","modified":1508485084000},{"_id":"source/_posts/跨域.md","hash":"e836da62debd7f55bf1a10e54ba6e8a38f8f8e01","modified":1508378575000},{"_id":"source/tags/index.md","hash":"1b7d5e9f0a008995a9a728733425ed10af97dc16","modified":1503718149000},{"_id":"source/categories/index.md","hash":"00873ac983d0686394466fbb6e25b29c83e1b75c","modified":1503718133000},{"_id":"source/uploads/img1.png","hash":"ac021cfde0c36984edf0a93a30ce75b5cc1b7f0e","modified":1508335539000},{"_id":"source/uploads/img10.png","hash":"57364eb2dae2db884a928c32ba9312b67f6c9172","modified":1508409247000},{"_id":"source/uploads/img11.png","hash":"8eebd29d48283e181688b014e28ba0d69c628df2","modified":1508466709000},{"_id":"source/uploads/img2.png","hash":"e690df06a9b71315833cc8b144dd330fed3357d0","modified":1508336812000},{"_id":"source/uploads/img3.png","hash":"e690df06a9b71315833cc8b144dd330fed3357d0","modified":1508336812000},{"_id":"source/uploads/img4.png","hash":"e690df06a9b71315833cc8b144dd330fed3357d0","modified":1508336812000},{"_id":"source/uploads/img5.png","hash":"1d24962a30f3a04de8ccfb04a614685c70502f97","modified":1508338361000},{"_id":"source/uploads/img6.png","hash":"ca6d7331c82af5ab03525c82c2b12d2970d55aeb","modified":1508338666000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1503475748000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1503475748000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1503475722000},{"_id":"themes/next/.git/index","hash":"4d33c6d60f35b685b34330f47d3b68f206309ba6","modified":1503486731000},{"_id":"themes/next/.git/packed-refs","hash":"bfcf14f1392b4d636be726a35cb488b01322b657","modified":1503475748000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1503475748000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"e9169b65a7e3392c27562f9e11061a3ab76bb600","modified":1503475748000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"679cdcc33eda5b33375206b2add1de84cea1615e","modified":1503475748000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1503475748000},{"_id":"themes/next/languages/de.yml","hash":"98aa551443b2a61a74b6f2a218635da6d2f6cf57","modified":1503475748000},{"_id":"themes/next/languages/default.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1503475748000},{"_id":"themes/next/languages/en.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1503475748000},{"_id":"themes/next/languages/fr-FR.yml","hash":"a14d051bbec26cfcae358bdcf1acf62a35fb1a45","modified":1503475748000},{"_id":"themes/next/languages/id.yml","hash":"f8b57daac2e50ace9a6d5051b17208af8139c2ae","modified":1503475748000},{"_id":"themes/next/languages/ja.yml","hash":"0c99ba4ba7d36c43d002342611d2c656ef498582","modified":1503475748000},{"_id":"themes/next/languages/pt-BR.yml","hash":"91584764104ef29293117375fc010b1bdbe9aff6","modified":1503475748000},{"_id":"themes/next/languages/ko.yml","hash":"043951e82997131dd8be40ff2093ef36849ba725","modified":1503475748000},{"_id":"themes/next/languages/pt.yml","hash":"dfd0b8574177346b78cab29db055fbc44ac309dc","modified":1503475748000},{"_id":"themes/next/languages/ru.yml","hash":"98dd9b6ddd88400a7b02cd7e8adb41e7b842bf57","modified":1503475748000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c1255b722fc5fdecf1852c3b592edfea9dbb554c","modified":1503475748000},{"_id":"themes/next/languages/zh-hk.yml","hash":"e8072846fd43beadbae394e30a49aa5c92a0a53b","modified":1503475748000},{"_id":"themes/next/languages/zh-tw.yml","hash":"562141bfe450432131af012baa262a3de79a50bc","modified":1503475748000},{"_id":"themes/next/layout/_layout.swig","hash":"e3c40f48ffbe19e7a2a54e72c8bb273630c37633","modified":1503475748000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1503475748000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1503475748000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1503475748000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1503475748000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1503475748000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1503475748000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1503475748000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1503475748000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1503475748000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1503475748000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1503475748000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1503475748000},{"_id":"source/uploads/img12.png","hash":"8f924dfe243bd20410bb99a5f9fb5d0d47e76815","modified":1508471587000},{"_id":"source/uploads/img7.png","hash":"76336493e65390bd80b7481ace6a37a3cda562d6","modified":1508222806000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1503475722000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1503475722000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1503475722000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1503475722000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1503475722000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1503475722000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1503475722000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1503475722000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1503475722000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1503475722000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1503475722000},{"_id":"themes/next/.git/logs/HEAD","hash":"99fbf74ed93121013c5da27427db5c53213b21b6","modified":1503475748000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1503475748000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1503475748000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1503475748000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1503475748000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1503475748000},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1503475748000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"dec65ee101231abbd9ef663e92f587d97d47c625","modified":1503475748000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1503475748000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1503475748000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1503475748000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1503475748000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1503475748000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fb02c81273d5897ebb98b50f4c10f7edc34f9240","modified":1503475748000},{"_id":"themes/next/layout/_partials/head.swig","hash":"86a821e9759cf243e27bf67921c7203568d8c756","modified":1503475748000},{"_id":"themes/next/layout/_partials/header.swig","hash":"714d32f6f04a7400b47bbd7fbfa008fec672b894","modified":1503475748000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1503475748000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1503475748000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1503475748000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1503475748000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1503475748000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1503475748000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1503475748000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1503475748000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1503475748000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1503475748000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1503475748000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1503475748000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1503475748000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1503475748000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1503475748000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1503475748000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1503475748000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1503475748000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1503475748000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1503475748000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503475748000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1503475748000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1503475748000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1503475748000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1503475748000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1503475748000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1503475748000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1503475748000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503475748000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1503475748000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503475748000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1503475748000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503475748000},{"_id":"source/uploads/img9.png","hash":"7d0e07a15ec4a7d6f727a5d60ef0302372064cac","modified":1508400879000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503475748000},{"_id":"themes/next/.git/refs/heads/master","hash":"94a27dbce662f9c7ba331a8b282468cb7633f6f7","modified":1503475748000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1503475748000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1503475748000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1503475748000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1503475748000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1503475748000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1503475748000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1503475748000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1503475748000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1503475748000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1503475748000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1503475748000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1503475748000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1503475748000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1503475748000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1503475748000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1503475748000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1503475748000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1503475748000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1503475748000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1503475748000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1503475748000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1503475748000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1503475748000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1503475748000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1503475748000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1503475748000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1503475748000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1503475748000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1503475748000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1503475748000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1503475748000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1503475748000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1503475748000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1503475748000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1503475748000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1503475748000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1503475748000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503475748000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503475748000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1503475748000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1503475748000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1503475748000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1503475748000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1503475748000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1503475748000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1503475748000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1503475748000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1503475748000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1503475748000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1503475748000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1503475748000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503475748000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1503475748000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1503475748000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1503475748000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1503475748000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1503475748000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1503475748000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1503475748000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1503475748000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1503475748000},{"_id":"source/uploads/img8.png","hash":"32e828522bbf0bbb71a4d949128221cbd7c7210b","modified":1508400369000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"99fbf74ed93121013c5da27427db5c53213b21b6","modified":1503475748000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1503475748000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1503475748000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1503475748000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"a9c6355d6516af2e13254ec89e33e5b7dcf8ceb4","modified":1503475748000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1503475748000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1503475748000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1503475748000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1503475748000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1503475748000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"f2030fa436c47791d1a42358cc0ef6f9809f212c","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"0af5a9322156c4c21d3c7d38f5ee48de5286f523","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1503475748000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1503475748000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1503475748000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1503475748000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1503475748000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503475748000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1503475748000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1503475748000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1503475748000},{"_id":"source/uploads/myIcon.jpeg","hash":"54d0d9b9ad82e3e6572c3aa4f1265b8e07cbf5fb","modified":1503718663000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503475748000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1503475748000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"99fbf74ed93121013c5da27427db5c53213b21b6","modified":1503475748000},{"_id":"themes/next/.git/objects/pack/pack-d5df21449b000fad78a8103d776156f6e3d057e2.idx","hash":"ee1cd3a1d2539ec04d5892cca984b2fa7c533eb3","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e6680feea343cecbdde8d643c777d689742abc28","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1503475748000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1503475748000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1503475748000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503475748000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503475748000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503475748000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1503475748000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503475748000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1503475748000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1503475748000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1503475748000},{"_id":"themes/next/.git/objects/pack/pack-d5df21449b000fad78a8103d776156f6e3d057e2.pack","hash":"b55eaaac8d044e4f2c5545e33f95bff54eeecf2a","modified":1503475748000},{"_id":"public/tags/index.html","hash":"b1df0eef538062fd0992190d4db2268a02924994","modified":1508485380720},{"_id":"public/categories/index.html","hash":"1c41b1e93f1c063ad8c97278938a9fd1ba5d5238","modified":1508485380720},{"_id":"public/archives/2017/08/index.html","hash":"1d2f16fb0bcce9b545e28541042ceb06b2a072d0","modified":1508485380721},{"_id":"public/archives/2017/10/index.html","hash":"9a2a017e7a3d8b02c9e1b39d86ddc3e3adf7ef89","modified":1508485380721},{"_id":"public/tags/随笔/index.html","hash":"c51fd9ad9b6d8173cc189d4871931fd509acc941","modified":1508485380721},{"_id":"public/tags/CSS/index.html","hash":"5f00d8feb962f608db33bb48cf97c12436815e46","modified":1508485380721},{"_id":"public/tags/js/index.html","hash":"6feb94a9bae8c2f6fcf1b7c9654fd9326502e076","modified":1508485380721},{"_id":"public/2017/10/20/读《javaScript高级程序设计－第6章》之继承/index.html","hash":"1a0edd9ab0ea779a5f11c2f8753a53f0d9adf4b0","modified":1508485380721},{"_id":"public/2017/10/19/读《javaScript高级程序设计－第6章》之封装类/index.html","hash":"cd212c609666064c6d187c60ae4e23ea482cf93c","modified":1508485380721},{"_id":"public/2017/10/18/读《javaScript高级程序设计－第6章》之理解对象/index.html","hash":"e6a3f392b56c1c1df9c856d55a66f9f395642661","modified":1508485380721},{"_id":"public/2017/10/17/CSS清浮动/index.html","hash":"14e7d8d2b86c190c72e659f659fb00647c63f0bd","modified":1508485380721},{"_id":"public/2017/08/26/Nginx代理解决跨域的理解/index.html","hash":"9c2ca6fe7472c3dacd7540ba4f7e98d0de104b2e","modified":1508485380721},{"_id":"public/2017/08/23/github上搭建个人主页/index.html","hash":"a3e63c204bab227079ca3be48406464b4963940e","modified":1508485380721},{"_id":"public/2017/08/22/跨域/index.html","hash":"725c81d65c364c10cb29dadbc75643f71a89c92a","modified":1508485380721},{"_id":"public/archives/index.html","hash":"3fe367bde0486a8dff4ce35b582d2f689fa66a30","modified":1508485380722},{"_id":"public/archives/2017/index.html","hash":"066c258b75edc0281c1ed7f57045eaacb1e0c231","modified":1508485380722},{"_id":"public/index.html","hash":"ad42690392dc0330033916a3ead7b247c70ee9af","modified":1508485380722},{"_id":"public/uploads/img1.png","hash":"ac021cfde0c36984edf0a93a30ce75b5cc1b7f0e","modified":1508485380729},{"_id":"public/uploads/img10.png","hash":"57364eb2dae2db884a928c32ba9312b67f6c9172","modified":1508485380729},{"_id":"public/uploads/img11.png","hash":"8eebd29d48283e181688b014e28ba0d69c628df2","modified":1508485380729},{"_id":"public/uploads/img2.png","hash":"e690df06a9b71315833cc8b144dd330fed3357d0","modified":1508485380729},{"_id":"public/uploads/img3.png","hash":"e690df06a9b71315833cc8b144dd330fed3357d0","modified":1508485380729},{"_id":"public/uploads/img4.png","hash":"e690df06a9b71315833cc8b144dd330fed3357d0","modified":1508485380729},{"_id":"public/uploads/img5.png","hash":"1d24962a30f3a04de8ccfb04a614685c70502f97","modified":1508485380729},{"_id":"public/uploads/img6.png","hash":"ca6d7331c82af5ab03525c82c2b12d2970d55aeb","modified":1508485380729},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1508485380729},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1508485380730},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508485380730},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1508485380730},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1508485380730},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1508485380730},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1508485380730},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1508485380730},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1508485380730},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508485380730},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1508485380730},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508485380730},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1508485380730},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508485380730},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1508485380730},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1508485380730},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508485380730},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508485380730},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508485380730},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508485380730},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508485380730},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508485380731},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1508485380731},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508485380731},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508485380731},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508485380731},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508485380731},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508485380731},{"_id":"public/uploads/img12.png","hash":"8f924dfe243bd20410bb99a5f9fb5d0d47e76815","modified":1508485381439},{"_id":"public/uploads/img7.png","hash":"76336493e65390bd80b7481ace6a37a3cda562d6","modified":1508485381440},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508485381460},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508485381461},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1508485381471},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1508485381471},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1508485381471},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1508485381471},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1508485381471},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1508485381471},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1508485381472},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1508485381472},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1508485381472},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1508485381472},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1508485381472},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508485381472},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1508485381472},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508485381472},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1508485381472},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1508485381472},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1508485381472},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1508485381473},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1508485381473},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1508485381473},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508485381473},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508485381474},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508485381474},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1508485381474},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508485381474},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1508485381474},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1508485381474},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1508485381474},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1508485381474},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508485381474},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508485381474},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1508485381474},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1508485381474},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1508485381474},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1508485381474},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1508485381474},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1508485381475},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1508485381475},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1508485381475},{"_id":"public/css/main.css","hash":"9e0bcd227878ad7da0dec6f469f7a40cab60fb22","modified":1508485381475},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1508485381475},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1508485381475},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1508485381475},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1508485381475},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1508485381475},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1508485381475},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1508485381475},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1508485381475},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1508485381475},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1508485381476},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1508485381476},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1508485381476},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1508485381476},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1508485381476},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1508485381476},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1508485381476},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1508485381477},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1508485381477},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508485381477},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508485381477},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508485381478},{"_id":"public/uploads/img9.png","hash":"7d0e07a15ec4a7d6f727a5d60ef0302372064cac","modified":1508485381485},{"_id":"public/uploads/img8.png","hash":"32e828522bbf0bbb71a4d949128221cbd7c7210b","modified":1508485381501},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1508485381501},{"_id":"public/uploads/myIcon.jpeg","hash":"54d0d9b9ad82e3e6572c3aa4f1265b8e07cbf5fb","modified":1508485381503}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-08-26T03:27:54.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-26 11:27:54\ntype: \"tags\"\n---\n","updated":"2017-08-26T03:29:09.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj8zl8vj2000kssej86vp59wq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-08-26T03:19:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-26 11:19:16\ntype: \"categories\"\n---\n","updated":"2017-08-26T03:28:53.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj8zl8vj4000lssej1l2zjqo7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Nginx代理解决跨域的理解","date":"2017-08-26T03:26:31.000Z","_content":"# Nginx代理解决跨域的理解 #\n  ## 什么是nginx? ##\n  Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。\n  ## 跨域问题原因：\n  浏览器访问时会创建请求头，请求头中存在ui服务器域名，当它去访问一个跨域服务器时仍然带着这个ui服务器域名，这时跨域服务器会拦截这个带着ui服务器域名的访问，浏览器就会报不允许跨域访问的错。\n  ## 第一种方案：（适用于跨域服务器你不能动的情况）\n  ui服务器不用nginx代理，只用Nginx代理跨域服务器，代理服务器实现允许跨域请求后，浏览器访问UI服务器，下载UI到浏览器，浏览器把要发给跨域服务器的请求发给代理服务器（要发给UI服务器的请求仍然发给UI服务器），代理服务器再去跨域服务器请求（跨域是浏览器触发的，代理服务器访问跨域服务器就不会有跨域问题），获取到跨域服务器的响应后再把该响应返给浏览器，这样就不需要跨域服务器做任何改变就可以实现跨域访问。\n  ## 第二种方案：\n  把ui所在的服务器和跨域服务器都用nginx代理转发，浏览器访问nginx，nginx到ui服务获取ui，再把ui下载到浏览器，浏览器发起ui中的URL，该URL为Nginx封装后的跨域服务器的URL或ui服务器的URL，该URL到达Nginx之后，会被转发到跨域服务器或ui服务器，请求处理完毕后，会通过Nginx中转返回给浏览器。暴露出来的或者浏览器所发起的url都是nginx的url，nginx去跨域服务器和ui服务器获取响应，返给浏览器，这样就没有跨域问题了。\n  ## 什么是反向代理？\n  反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n  简单来说：\n  正向代理：是代表客户端去请求接受响应\n  反向代理：是代表服务端来接受请求去响应\n","source":"_posts/Nginx代理解决跨域的理解.md","raw":"---\ntitle: Nginx代理解决跨域的理解\ndate: 2017-08-26 11:26:31\ntags: 随笔\n---\n# Nginx代理解决跨域的理解 #\n  ## 什么是nginx? ##\n  Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。\n  ## 跨域问题原因：\n  浏览器访问时会创建请求头，请求头中存在ui服务器域名，当它去访问一个跨域服务器时仍然带着这个ui服务器域名，这时跨域服务器会拦截这个带着ui服务器域名的访问，浏览器就会报不允许跨域访问的错。\n  ## 第一种方案：（适用于跨域服务器你不能动的情况）\n  ui服务器不用nginx代理，只用Nginx代理跨域服务器，代理服务器实现允许跨域请求后，浏览器访问UI服务器，下载UI到浏览器，浏览器把要发给跨域服务器的请求发给代理服务器（要发给UI服务器的请求仍然发给UI服务器），代理服务器再去跨域服务器请求（跨域是浏览器触发的，代理服务器访问跨域服务器就不会有跨域问题），获取到跨域服务器的响应后再把该响应返给浏览器，这样就不需要跨域服务器做任何改变就可以实现跨域访问。\n  ## 第二种方案：\n  把ui所在的服务器和跨域服务器都用nginx代理转发，浏览器访问nginx，nginx到ui服务获取ui，再把ui下载到浏览器，浏览器发起ui中的URL，该URL为Nginx封装后的跨域服务器的URL或ui服务器的URL，该URL到达Nginx之后，会被转发到跨域服务器或ui服务器，请求处理完毕后，会通过Nginx中转返回给浏览器。暴露出来的或者浏览器所发起的url都是nginx的url，nginx去跨域服务器和ui服务器获取响应，返给浏览器，这样就没有跨域问题了。\n  ## 什么是反向代理？\n  反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n  简单来说：\n  正向代理：是代表客户端去请求接受响应\n  反向代理：是代表服务端来接受请求去响应\n","slug":"Nginx代理解决跨域的理解","published":1,"updated":"2017-10-19T02:02:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zl8v8v0000ssej127s8j4e","content":"<h1 id=\"Nginx代理解决跨域的理解\"><a href=\"#Nginx代理解决跨域的理解\" class=\"headerlink\" title=\"Nginx代理解决跨域的理解\"></a>Nginx代理解决跨域的理解</h1><h2 id=\"什么是nginx\"><a href=\"#什么是nginx\" class=\"headerlink\" title=\"什么是nginx?\"></a>什么是nginx?</h2><p>  Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p>\n<h2 id=\"跨域问题原因：\"><a href=\"#跨域问题原因：\" class=\"headerlink\" title=\"跨域问题原因：\"></a>跨域问题原因：</h2><p>  浏览器访问时会创建请求头，请求头中存在ui服务器域名，当它去访问一个跨域服务器时仍然带着这个ui服务器域名，这时跨域服务器会拦截这个带着ui服务器域名的访问，浏览器就会报不允许跨域访问的错。</p>\n<h2 id=\"第一种方案：（适用于跨域服务器你不能动的情况）\"><a href=\"#第一种方案：（适用于跨域服务器你不能动的情况）\" class=\"headerlink\" title=\"第一种方案：（适用于跨域服务器你不能动的情况）\"></a>第一种方案：（适用于跨域服务器你不能动的情况）</h2><p>  ui服务器不用nginx代理，只用Nginx代理跨域服务器，代理服务器实现允许跨域请求后，浏览器访问UI服务器，下载UI到浏览器，浏览器把要发给跨域服务器的请求发给代理服务器（要发给UI服务器的请求仍然发给UI服务器），代理服务器再去跨域服务器请求（跨域是浏览器触发的，代理服务器访问跨域服务器就不会有跨域问题），获取到跨域服务器的响应后再把该响应返给浏览器，这样就不需要跨域服务器做任何改变就可以实现跨域访问。</p>\n<h2 id=\"第二种方案：\"><a href=\"#第二种方案：\" class=\"headerlink\" title=\"第二种方案：\"></a>第二种方案：</h2><p>  把ui所在的服务器和跨域服务器都用nginx代理转发，浏览器访问nginx，nginx到ui服务获取ui，再把ui下载到浏览器，浏览器发起ui中的URL，该URL为Nginx封装后的跨域服务器的URL或ui服务器的URL，该URL到达Nginx之后，会被转发到跨域服务器或ui服务器，请求处理完毕后，会通过Nginx中转返回给浏览器。暴露出来的或者浏览器所发起的url都是nginx的url，nginx去跨域服务器和ui服务器获取响应，返给浏览器，这样就没有跨域问题了。</p>\n<h2 id=\"什么是反向代理？\"><a href=\"#什么是反向代理？\" class=\"headerlink\" title=\"什么是反向代理？\"></a>什么是反向代理？</h2><p>  反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。<br>  简单来说：<br>  正向代理：是代表客户端去请求接受响应<br>  反向代理：是代表服务端来接受请求去响应</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nginx代理解决跨域的理解\"><a href=\"#Nginx代理解决跨域的理解\" class=\"headerlink\" title=\"Nginx代理解决跨域的理解\"></a>Nginx代理解决跨域的理解</h1><h2 id=\"什么是nginx\"><a href=\"#什么是nginx\" class=\"headerlink\" title=\"什么是nginx?\"></a>什么是nginx?</h2><p>  Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p>\n<h2 id=\"跨域问题原因：\"><a href=\"#跨域问题原因：\" class=\"headerlink\" title=\"跨域问题原因：\"></a>跨域问题原因：</h2><p>  浏览器访问时会创建请求头，请求头中存在ui服务器域名，当它去访问一个跨域服务器时仍然带着这个ui服务器域名，这时跨域服务器会拦截这个带着ui服务器域名的访问，浏览器就会报不允许跨域访问的错。</p>\n<h2 id=\"第一种方案：（适用于跨域服务器你不能动的情况）\"><a href=\"#第一种方案：（适用于跨域服务器你不能动的情况）\" class=\"headerlink\" title=\"第一种方案：（适用于跨域服务器你不能动的情况）\"></a>第一种方案：（适用于跨域服务器你不能动的情况）</h2><p>  ui服务器不用nginx代理，只用Nginx代理跨域服务器，代理服务器实现允许跨域请求后，浏览器访问UI服务器，下载UI到浏览器，浏览器把要发给跨域服务器的请求发给代理服务器（要发给UI服务器的请求仍然发给UI服务器），代理服务器再去跨域服务器请求（跨域是浏览器触发的，代理服务器访问跨域服务器就不会有跨域问题），获取到跨域服务器的响应后再把该响应返给浏览器，这样就不需要跨域服务器做任何改变就可以实现跨域访问。</p>\n<h2 id=\"第二种方案：\"><a href=\"#第二种方案：\" class=\"headerlink\" title=\"第二种方案：\"></a>第二种方案：</h2><p>  把ui所在的服务器和跨域服务器都用nginx代理转发，浏览器访问nginx，nginx到ui服务获取ui，再把ui下载到浏览器，浏览器发起ui中的URL，该URL为Nginx封装后的跨域服务器的URL或ui服务器的URL，该URL到达Nginx之后，会被转发到跨域服务器或ui服务器，请求处理完毕后，会通过Nginx中转返回给浏览器。暴露出来的或者浏览器所发起的url都是nginx的url，nginx去跨域服务器和ui服务器获取响应，返给浏览器，这样就没有跨域问题了。</p>\n<h2 id=\"什么是反向代理？\"><a href=\"#什么是反向代理？\" class=\"headerlink\" title=\"什么是反向代理？\"></a>什么是反向代理？</h2><p>  反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。<br>  简单来说：<br>  正向代理：是代表客户端去请求接受响应<br>  反向代理：是代表服务端来接受请求去响应</p>\n"},{"title":"CSS清浮动","date":"2017-10-17T11:40:21.000Z","_content":"*摘要: css清除浮动float的三种方法总结，为什么清浮动？浮动会有那些影响？*\n\nHTML代码：\n```\n<div class=“outer”>       \n    <div class=\"div1\">1</div>    \n    <div class=\"div2\">2</div>    \n    <div class=\"div3\">3</div>\n</div>\n```\n\nCSS代码：\n```\n.outer{border: 4px solid #ccc;background: #fc9;color: #fff; margin: 50px auto;padding: 50px;} \n.div1{width: 80px;height: 80px;background: red;float: left;}\n.div2{width: 80px;height: 80px;background: blue;float: left;}\n.div3{width: 80px;height: 80px;background: sienna;float: left;}\n```\n效果图：margin、padding和border正常显示了，没设置height，height为0。\n![](../uploads/img1.png)\n\n**影响一：这里我没有给最外层的DIV.outer 设置高度，但是我们知道如果它里面的元素不浮动的话，那么这个外层的高是会自动被撑开的，height就不会是0。但是当内层元素浮动后,外层的高不能被撑开，所以height仍然为0。（后面还会提到一种影响）**\n\n- 方式一\n最简单常见的方式就是在浮动元素后面添加新的空元素，新的空元素应用clear:both。\n如下：\n```\n<div class=\"outer\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n    <div style=\"clear: both;\"></div>\n</div>\n```\n结果：height被自动撑开。（当然，如果你知道外层div的高度，显示的设置它的height也可以。）\n![](../uploads/img2.png)\n- 方式二：父级div应用overflow:auto;\n如下：\n```\n<div class=\"outer\" style=\"overflow: auto; zoom: 1;\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n</div>\n```\n结果：`style=\"overflow: auto; zoom: 1;”`   //zoom: 1是处理兼容问题的\n![](../uploads/img3.png)\n- 方式三\n\n高大上的方法是给父级元素用`:after`\n如下：\n```\n.outer {zoom:1;}    /*==for IE6/7 Maxthon2==*/\n.outer:after {clear:both;content:'.';display:block;width: 0;height: 0;visibility:hidden;}   /*==for FF/chrome/opera/IE8==*/\n```\n结果：\n![](../uploads/img4.png)\n\n**影响二：这是浮动的第二个影响\n描述：在浮动元素后跟一个普通元素**\n```\n<div class=\"outer\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n    <div style=\"background: #cccccc;\">44</div>\n</div>\n```\n结果：第4个元素是个块级元素，按理应该是在div1的下面，但现在却浮动到了div3的右面。\n![](../uploads/img5.png)\n\n清浮动：\n就是使用上面的方式一的方法。只不过不需要添加新的空元素，直接在不需要浮动的第四个元素上应用clear:both\n如下：\n```\n<div class=\"outer\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n    <div style=\"background: #cccccc; clear: both;\">44</div>\n</div>\n```\n结果：\n![](../uploads/img6.png)\n\n","source":"_posts/CSS清浮动.md","raw":"---\ntitle: CSS清浮动\ndate: 2017-10-17 19:40:21\ntags: CSS\n---\n*摘要: css清除浮动float的三种方法总结，为什么清浮动？浮动会有那些影响？*\n\nHTML代码：\n```\n<div class=“outer”>       \n    <div class=\"div1\">1</div>    \n    <div class=\"div2\">2</div>    \n    <div class=\"div3\">3</div>\n</div>\n```\n\nCSS代码：\n```\n.outer{border: 4px solid #ccc;background: #fc9;color: #fff; margin: 50px auto;padding: 50px;} \n.div1{width: 80px;height: 80px;background: red;float: left;}\n.div2{width: 80px;height: 80px;background: blue;float: left;}\n.div3{width: 80px;height: 80px;background: sienna;float: left;}\n```\n效果图：margin、padding和border正常显示了，没设置height，height为0。\n![](../uploads/img1.png)\n\n**影响一：这里我没有给最外层的DIV.outer 设置高度，但是我们知道如果它里面的元素不浮动的话，那么这个外层的高是会自动被撑开的，height就不会是0。但是当内层元素浮动后,外层的高不能被撑开，所以height仍然为0。（后面还会提到一种影响）**\n\n- 方式一\n最简单常见的方式就是在浮动元素后面添加新的空元素，新的空元素应用clear:both。\n如下：\n```\n<div class=\"outer\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n    <div style=\"clear: both;\"></div>\n</div>\n```\n结果：height被自动撑开。（当然，如果你知道外层div的高度，显示的设置它的height也可以。）\n![](../uploads/img2.png)\n- 方式二：父级div应用overflow:auto;\n如下：\n```\n<div class=\"outer\" style=\"overflow: auto; zoom: 1;\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n</div>\n```\n结果：`style=\"overflow: auto; zoom: 1;”`   //zoom: 1是处理兼容问题的\n![](../uploads/img3.png)\n- 方式三\n\n高大上的方法是给父级元素用`:after`\n如下：\n```\n.outer {zoom:1;}    /*==for IE6/7 Maxthon2==*/\n.outer:after {clear:both;content:'.';display:block;width: 0;height: 0;visibility:hidden;}   /*==for FF/chrome/opera/IE8==*/\n```\n结果：\n![](../uploads/img4.png)\n\n**影响二：这是浮动的第二个影响\n描述：在浮动元素后跟一个普通元素**\n```\n<div class=\"outer\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n    <div style=\"background: #cccccc;\">44</div>\n</div>\n```\n结果：第4个元素是个块级元素，按理应该是在div1的下面，但现在却浮动到了div3的右面。\n![](../uploads/img5.png)\n\n清浮动：\n就是使用上面的方式一的方法。只不过不需要添加新的空元素，直接在不需要浮动的第四个元素上应用clear:both\n如下：\n```\n<div class=\"outer\">\n    <div class=\"div1\">1</div>\n    <div class=\"div2\">2</div>\n    <div class=\"div3\">3</div>\n    <div style=\"background: #cccccc; clear: both;\">44</div>\n</div>\n```\n结果：\n![](../uploads/img6.png)\n\n","slug":"CSS清浮动","published":1,"updated":"2017-10-20T07:42:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zl8v910001ssejlmed0y7p","content":"<p><em>摘要: css清除浮动float的三种方法总结，为什么清浮动？浮动会有那些影响？</em></p>\n<p>HTML代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=“outer”&gt;       </div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;    </div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;    </div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>CSS代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;border: 4px solid #ccc;background: #fc9;color: #fff; margin: 50px auto;padding: 50px;&#125; </div><div class=\"line\">.div1&#123;width: 80px;height: 80px;background: red;float: left;&#125;</div><div class=\"line\">.div2&#123;width: 80px;height: 80px;background: blue;float: left;&#125;</div><div class=\"line\">.div3&#123;width: 80px;height: 80px;background: sienna;float: left;&#125;</div></pre></td></tr></table></figure></p>\n<p>效果图：margin、padding和border正常显示了，没设置height，height为0。<br><img src=\"../uploads/img1.png\" alt=\"\"></p>\n<p><strong>影响一：这里我没有给最外层的DIV.outer 设置高度，但是我们知道如果它里面的元素不浮动的话，那么这个外层的高是会自动被撑开的，height就不会是0。但是当内层元素浮动后,外层的高不能被撑开，所以height仍然为0。（后面还会提到一种影响）</strong></p>\n<ul>\n<li>方式一<br>最简单常见的方式就是在浮动元素后面添加新的空元素，新的空元素应用clear:both。<br>如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果：height被自动撑开。（当然，如果你知道外层div的高度，显示的设置它的height也可以。）<br><img src=\"../uploads/img2.png\" alt=\"\"></p>\n<ul>\n<li>方式二：父级div应用overflow:auto;<br>如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot; style=&quot;overflow: auto; zoom: 1;&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果：<code>style=&quot;overflow: auto; zoom: 1;”</code>   //zoom: 1是处理兼容问题的<br><img src=\"../uploads/img3.png\" alt=\"\"></p>\n<ul>\n<li>方式三</li>\n</ul>\n<p>高大上的方法是给父级元素用<code>:after</code><br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer &#123;zoom:1;&#125;    /*==for IE6/7 Maxthon2==*/</div><div class=\"line\">.outer:after &#123;clear:both;content:&apos;.&apos;;display:block;width: 0;height: 0;visibility:hidden;&#125;   /*==for FF/chrome/opera/IE8==*/</div></pre></td></tr></table></figure></p>\n<p>结果：<br><img src=\"../uploads/img4.png\" alt=\"\"></p>\n<p><strong>影响二：这是浮动的第二个影响<br>描述：在浮动元素后跟一个普通元素</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;background: #cccccc;&quot;&gt;44&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>结果：第4个元素是个块级元素，按理应该是在div1的下面，但现在却浮动到了div3的右面。<br><img src=\"../uploads/img5.png\" alt=\"\"></p>\n<p>清浮动：<br>就是使用上面的方式一的方法。只不过不需要添加新的空元素，直接在不需要浮动的第四个元素上应用clear:both<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;background: #cccccc; clear: both;&quot;&gt;44&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>结果：<br><img src=\"../uploads/img6.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>摘要: css清除浮动float的三种方法总结，为什么清浮动？浮动会有那些影响？</em></p>\n<p>HTML代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=“outer”&gt;       </div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;    </div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;    </div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>CSS代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer&#123;border: 4px solid #ccc;background: #fc9;color: #fff; margin: 50px auto;padding: 50px;&#125; </div><div class=\"line\">.div1&#123;width: 80px;height: 80px;background: red;float: left;&#125;</div><div class=\"line\">.div2&#123;width: 80px;height: 80px;background: blue;float: left;&#125;</div><div class=\"line\">.div3&#123;width: 80px;height: 80px;background: sienna;float: left;&#125;</div></pre></td></tr></table></figure></p>\n<p>效果图：margin、padding和border正常显示了，没设置height，height为0。<br><img src=\"../uploads/img1.png\" alt=\"\"></p>\n<p><strong>影响一：这里我没有给最外层的DIV.outer 设置高度，但是我们知道如果它里面的元素不浮动的话，那么这个外层的高是会自动被撑开的，height就不会是0。但是当内层元素浮动后,外层的高不能被撑开，所以height仍然为0。（后面还会提到一种影响）</strong></p>\n<ul>\n<li>方式一<br>最简单常见的方式就是在浮动元素后面添加新的空元素，新的空元素应用clear:both。<br>如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果：height被自动撑开。（当然，如果你知道外层div的高度，显示的设置它的height也可以。）<br><img src=\"../uploads/img2.png\" alt=\"\"></p>\n<ul>\n<li>方式二：父级div应用overflow:auto;<br>如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot; style=&quot;overflow: auto; zoom: 1;&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果：<code>style=&quot;overflow: auto; zoom: 1;”</code>   //zoom: 1是处理兼容问题的<br><img src=\"../uploads/img3.png\" alt=\"\"></p>\n<ul>\n<li>方式三</li>\n</ul>\n<p>高大上的方法是给父级元素用<code>:after</code><br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">.outer &#123;zoom:1;&#125;    /*==for IE6/7 Maxthon2==*/</div><div class=\"line\">.outer:after &#123;clear:both;content:&apos;.&apos;;display:block;width: 0;height: 0;visibility:hidden;&#125;   /*==for FF/chrome/opera/IE8==*/</div></pre></td></tr></table></figure></p>\n<p>结果：<br><img src=\"../uploads/img4.png\" alt=\"\"></p>\n<p><strong>影响二：这是浮动的第二个影响<br>描述：在浮动元素后跟一个普通元素</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;background: #cccccc;&quot;&gt;44&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>结果：第4个元素是个块级元素，按理应该是在div1的下面，但现在却浮动到了div3的右面。<br><img src=\"../uploads/img5.png\" alt=\"\"></p>\n<p>清浮动：<br>就是使用上面的方式一的方法。只不过不需要添加新的空元素，直接在不需要浮动的第四个元素上应用clear:both<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;outer&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;background: #cccccc; clear: both;&quot;&gt;44&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>结果：<br><img src=\"../uploads/img6.png\" alt=\"\"></p>\n"},{"title":"github上搭建个人主页","date":"2017-08-23T07:53:39.000Z","_content":"1. 在github上创建并设置远程库，名字：chenfengjuan.github.io,（名字必须是这个）\n2. 本地建立chenfengjuan.github.io文件夹，这个文件夹，必须为空\n3. 在chenfengjuan.github.io目录下执行hero init\n4. 安装相关依赖\n`npm install hexo —save`\n`nam install`\n5. 运行  `hero g`\n这行命令是加载`hexo`基础`html`、`css`、`js`等文件。\n在这完成后等于已经在本地创建了一个网页，想查看的话，输入`hexo s`，相当于在本地起了个服务器，在浏览器输入 `http://localhost:4000/`，就会看到默认的页面了，证明本地`hexo`默认模板配置成功\n6. 修改站点配置文件，在根目录`_config.yml`文件中 \n```\n# Site\ntitle: 网站标题\nsubtitle: 副标题\ndescription: 个人签名\nauthor: 姓名\nlanguage: zh-Hans\ntimezone:\n# 同时还有\ndeploy:\n  type: git\n  repo: https://github.com/chenfengjuan/chenfengjuan.github.io.git\n  branch: master\n  ```\n7. 接下来就可以提交项目部署了，继续在chenfengjuan.github.io目录下执行下面的命令，安装部署工具（方便以后更新）\n`npm install hexo-deployer-git —save`\n8. 初始化本地仓库：\n`git init`\n9. 发布hexo到github page\n`hexo clean && hexo g && hero d`\n这一步执行后hexo会自动在你的这个`chenfengjuan.github.io`仓库的`master`分支下生成你的主页的静态html文件。\n这个时候其实你只要在浏览器里访问`chenfengjuan.github.io`，就可以看到你的主页了\n10. 为了保存我们的文章不因为换电脑等原因丢失，也就是本地的这个`chenfengjuan.github.io`文件夹的内容不丢失,我们可以在`https://github.com/username/username.github.io.git`,这个仓库下创建的`hexo`的分支\n创建并切换到新建分支：\n`git checkout -b hexo`\n将分支推送到远程仓库：\n`git push origin hero`\n这个分支保存了我们的文章的原始文件等。\n11. 新建文章,请用下面的命令\n`hexo new \"new article\"`\n之后在本地的`chenfengjuan.github.io`文件夹下的`source/_posts`目录下面，多了一个new-article.md的文件。打开之后就会开到自动生成的标题等内容，你只要在下面编写正文就可以了，正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。\n12. 新建文章后，发布到你的github page就可以了\n`hexo clean && hexo g && hexo d`\n","source":"_posts/github上搭建个人主页.md","raw":"---\ntitle: github上搭建个人主页\ndate: 2017-08-23 15:53:39\ntags: 随笔\n---\n1. 在github上创建并设置远程库，名字：chenfengjuan.github.io,（名字必须是这个）\n2. 本地建立chenfengjuan.github.io文件夹，这个文件夹，必须为空\n3. 在chenfengjuan.github.io目录下执行hero init\n4. 安装相关依赖\n`npm install hexo —save`\n`nam install`\n5. 运行  `hero g`\n这行命令是加载`hexo`基础`html`、`css`、`js`等文件。\n在这完成后等于已经在本地创建了一个网页，想查看的话，输入`hexo s`，相当于在本地起了个服务器，在浏览器输入 `http://localhost:4000/`，就会看到默认的页面了，证明本地`hexo`默认模板配置成功\n6. 修改站点配置文件，在根目录`_config.yml`文件中 \n```\n# Site\ntitle: 网站标题\nsubtitle: 副标题\ndescription: 个人签名\nauthor: 姓名\nlanguage: zh-Hans\ntimezone:\n# 同时还有\ndeploy:\n  type: git\n  repo: https://github.com/chenfengjuan/chenfengjuan.github.io.git\n  branch: master\n  ```\n7. 接下来就可以提交项目部署了，继续在chenfengjuan.github.io目录下执行下面的命令，安装部署工具（方便以后更新）\n`npm install hexo-deployer-git —save`\n8. 初始化本地仓库：\n`git init`\n9. 发布hexo到github page\n`hexo clean && hexo g && hero d`\n这一步执行后hexo会自动在你的这个`chenfengjuan.github.io`仓库的`master`分支下生成你的主页的静态html文件。\n这个时候其实你只要在浏览器里访问`chenfengjuan.github.io`，就可以看到你的主页了\n10. 为了保存我们的文章不因为换电脑等原因丢失，也就是本地的这个`chenfengjuan.github.io`文件夹的内容不丢失,我们可以在`https://github.com/username/username.github.io.git`,这个仓库下创建的`hexo`的分支\n创建并切换到新建分支：\n`git checkout -b hexo`\n将分支推送到远程仓库：\n`git push origin hero`\n这个分支保存了我们的文章的原始文件等。\n11. 新建文章,请用下面的命令\n`hexo new \"new article\"`\n之后在本地的`chenfengjuan.github.io`文件夹下的`source/_posts`目录下面，多了一个new-article.md的文件。打开之后就会开到自动生成的标题等内容，你只要在下面编写正文就可以了，正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。\n12. 新建文章后，发布到你的github page就可以了\n`hexo clean && hexo g && hexo d`\n","slug":"github上搭建个人主页","published":1,"updated":"2017-10-19T02:02:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zl8v990003ssejmmz39uvq","content":"<ol>\n<li>在github上创建并设置远程库，名字：chenfengjuan.github.io,（名字必须是这个）</li>\n<li>本地建立chenfengjuan.github.io文件夹，这个文件夹，必须为空</li>\n<li>在chenfengjuan.github.io目录下执行hero init</li>\n<li>安装相关依赖<br><code>npm install hexo —save</code><br><code>nam install</code></li>\n<li>运行  <code>hero g</code><br>这行命令是加载<code>hexo</code>基础<code>html</code>、<code>css</code>、<code>js</code>等文件。<br>在这完成后等于已经在本地创建了一个网页，想查看的话，输入<code>hexo s</code>，相当于在本地起了个服务器，在浏览器输入 <code>http://localhost:4000/</code>，就会看到默认的页面了，证明本地<code>hexo</code>默认模板配置成功</li>\n<li><p>修改站点配置文件，在根目录<code>_config.yml</code>文件中 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Site</div><div class=\"line\">title: 网站标题</div><div class=\"line\">subtitle: 副标题</div><div class=\"line\">description: 个人签名</div><div class=\"line\">author: 姓名</div><div class=\"line\">language: zh-Hans</div><div class=\"line\">timezone:</div><div class=\"line\"># 同时还有</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/chenfengjuan/chenfengjuan.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>接下来就可以提交项目部署了，继续在chenfengjuan.github.io目录下执行下面的命令，安装部署工具（方便以后更新）<br><code>npm install hexo-deployer-git —save</code></p>\n</li>\n<li>初始化本地仓库：<br><code>git init</code></li>\n<li>发布hexo到github page<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hero d</code><br>这一步执行后hexo会自动在你的这个<code>chenfengjuan.github.io</code>仓库的<code>master</code>分支下生成你的主页的静态html文件。<br>这个时候其实你只要在浏览器里访问<code>chenfengjuan.github.io</code>，就可以看到你的主页了</li>\n<li>为了保存我们的文章不因为换电脑等原因丢失，也就是本地的这个<code>chenfengjuan.github.io</code>文件夹的内容不丢失,我们可以在<code>https://github.com/username/username.github.io.git</code>,这个仓库下创建的<code>hexo</code>的分支<br>创建并切换到新建分支：<br><code>git checkout -b hexo</code><br>将分支推送到远程仓库：<br><code>git push origin hero</code><br>这个分支保存了我们的文章的原始文件等。</li>\n<li>新建文章,请用下面的命令<br><code>hexo new &quot;new article&quot;</code><br>之后在本地的<code>chenfengjuan.github.io</code>文件夹下的<code>source/_posts</code>目录下面，多了一个new-article.md的文件。打开之后就会开到自动生成的标题等内容，你只要在下面编写正文就可以了，正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。</li>\n<li>新建文章后，发布到你的github page就可以了<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>在github上创建并设置远程库，名字：chenfengjuan.github.io,（名字必须是这个）</li>\n<li>本地建立chenfengjuan.github.io文件夹，这个文件夹，必须为空</li>\n<li>在chenfengjuan.github.io目录下执行hero init</li>\n<li>安装相关依赖<br><code>npm install hexo —save</code><br><code>nam install</code></li>\n<li>运行  <code>hero g</code><br>这行命令是加载<code>hexo</code>基础<code>html</code>、<code>css</code>、<code>js</code>等文件。<br>在这完成后等于已经在本地创建了一个网页，想查看的话，输入<code>hexo s</code>，相当于在本地起了个服务器，在浏览器输入 <code>http://localhost:4000/</code>，就会看到默认的页面了，证明本地<code>hexo</code>默认模板配置成功</li>\n<li><p>修改站点配置文件，在根目录<code>_config.yml</code>文件中 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Site</div><div class=\"line\">title: 网站标题</div><div class=\"line\">subtitle: 副标题</div><div class=\"line\">description: 个人签名</div><div class=\"line\">author: 姓名</div><div class=\"line\">language: zh-Hans</div><div class=\"line\">timezone:</div><div class=\"line\"># 同时还有</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/chenfengjuan/chenfengjuan.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>接下来就可以提交项目部署了，继续在chenfengjuan.github.io目录下执行下面的命令，安装部署工具（方便以后更新）<br><code>npm install hexo-deployer-git —save</code></p>\n</li>\n<li>初始化本地仓库：<br><code>git init</code></li>\n<li>发布hexo到github page<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hero d</code><br>这一步执行后hexo会自动在你的这个<code>chenfengjuan.github.io</code>仓库的<code>master</code>分支下生成你的主页的静态html文件。<br>这个时候其实你只要在浏览器里访问<code>chenfengjuan.github.io</code>，就可以看到你的主页了</li>\n<li>为了保存我们的文章不因为换电脑等原因丢失，也就是本地的这个<code>chenfengjuan.github.io</code>文件夹的内容不丢失,我们可以在<code>https://github.com/username/username.github.io.git</code>,这个仓库下创建的<code>hexo</code>的分支<br>创建并切换到新建分支：<br><code>git checkout -b hexo</code><br>将分支推送到远程仓库：<br><code>git push origin hero</code><br>这个分支保存了我们的文章的原始文件等。</li>\n<li>新建文章,请用下面的命令<br><code>hexo new &quot;new article&quot;</code><br>之后在本地的<code>chenfengjuan.github.io</code>文件夹下的<code>source/_posts</code>目录下面，多了一个new-article.md的文件。打开之后就会开到自动生成的标题等内容，你只要在下面编写正文就可以了，正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。</li>\n<li>新建文章后，发布到你的github page就可以了<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></li>\n</ol>\n"},{"title":"读《javaScript高级程序设计－第6章》之封装类","date":"2017-10-19T11:24:20.000Z","_content":"## 一、工厂模式\n所谓的工厂模式就是，把创建具体对象的过程抽象成了一个函数，每次调用这个函数都会返回一个相似的对象。\n```\nfunction createPerson(name, age, job){\nvar o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function(){\nalert(this.name);\n    };   \n    return o;\n}\nvar person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = createPerson(\"Greg\", 27, \"Doctor\");\nperson1.sayName();   //\"Nicholas\"\nperson2.sayName();   //\"Greg\"\n```\n**工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。**\n\n## 二、构造函数模式\njs里经常如此写`var obj=new Object();var arr=new Array();`，`Object`和`Array`就是构造函数，使用`new`操作符可以创建相应类型的对象，使用`instanceof`可以验证对象的类型，例如：\n`alert(arr instance Array);      //true`\n构造函数模式就是，自定义像`Array`和`Object`等这样的构造函数，并使用new操作符调用它来创建自定义类型对象的方法。\n例如：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        alert(this.name);\n    };   \n}\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.sayName();   //\"Nicholas\"\nperson2.sayName();   //“Greg”\n```\n- new操作符\n使用new操作符调用，Person就是一个构造函数\n要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历一下4个步骤：\n    （1）创建一个新对象\n    （2）将构造函数的作用域赋给新对象，即把构造函数的this指向这个新对象\n    （3）执行构造函数中的代码（为这个新对象添加属性）\n    （4）返回新对象\n\n如果不使用new，Person就是一个普通的函数，可以正常调用。例如：\n```\n//作为普通函数在全局作用域下调用\nPerson(\"Greg\", 27, \"Doctor\");  //adds to window\nwindow.sayName();   //“Greg\"\n//作为普通函数在另一个对象中调用\nvar o = new Object();\nPerson.call(o, \"Kristen\", 25, \"Nurse\");\no.sayName();    //\"Kristen\"\n```\n- 检测类型\n`alert(person1 instanceof Object);  //true`\n`alert(person1 instanceof Person);//true`\n\n综上，创建自定义的构造函数，意味着将来可以将它的实例标识为一种特定的类型（类似于Array类型，Number类型）；而这正是构造函数模式胜过工厂模式的地方。但是构造函数模式也存在缺点。\n\n- 构造函数模式的问题\n**使用构造函数的主要问题就是，每个方法都要在每个实例上重新创建一遍（实例化一次Function对象），浪费内存。**例如，person1和person2都有一个sayName()的方法，但创建person1和person2时候，定义sayName这个方法时都实例化了一个函数对象，因此person1.sayName和person2.sayName是不相等的，而事实上它们又是做的同样的事情。或者也可以这么说，person1和person2的sayName()方法做同样的事情，但却在创建对象时被实例化了两次，也就占用了两倍内存。\n虽然可以解决，但并不完美，例如：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\n\nfunction sayName(){\n    alert(this.name);\n}\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor”);\nalert(person1.sayName == person2.sayName);  //true \n```\n但是如果共享方法有很多，就需要定义很多个全局函数，那么我们的自定义的引用类型就丝毫没有封装性可言了。好在，这些问题可以通过使用原型模式解决。\n\n## 3、原型模式\n#### （1）理解原型对象\n**无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个`prototype`属性，这个属性就是该函数的原型对象。每个函数都有一个原型对象，所有原型对象都会自动获得`constructor`属性，`constructor`指向该函数（拥有该`prototype`属性的函数）。**\n例如，`Person.prototype.constructor`指向`Person`。\n创建构造函数后，其原型对象默认只会取得`constructor`属性；至于其他的方法都是从`Object`继承来的（`__proto__`）。当调用构造函数创建一个新实例后，该实例内部将包含一个指针（`__proto__`），指向构造函数的原型对象。（ECMA-262第5版中管这个指针叫`[[Prototype]]`,但在脚本中没有标准的方式访问它。在chrome，safari和firefox中都支持一个属性`__proto__`，但在其他实现中`__proto__`对脚本是不可见的）。所以和实例有直接关系的是构造函数的原型对象，而不是构造函数。\n![](../uploads/img7.png)\n上图展示了Person构造函数、Person的原型对象和Person现有的两个实例之间的关系。\n\n####（2）实例属性和原型属性：\n**原型属性即构造函数的原型对象的属性；实例属性即在实例对象上直接添加的属性。**\n例如：person1.name=“Jone”。\n通过点运算符可以访问到实例的实例属性和原型属性。**实例访问属性时，脚本会先搜索实例属性，如果找到了，则停止搜索返回实例属性的值；如果没找到就继续搜索原型属性。所以如果实例属性和原型属性同名，那么原型属性就会被屏蔽掉，无法访问到。**\n需要注意的是：**实例无法修改他的原型属性的值，也无法修改原型对象（即不能修改、删除和增加一个原型属性）**\n *（注意：实例不能修改的是原型属性的值，但是如果原型属性指向一个引用类型，原型属性的值是存储这个引用类型的地址，即不能修改原型属性指向另一个对象，但却能修改原型属性指向的对象里的属性。下面原型对象的问题里还会再讲到）*。\n如果`person1.name=“Jone”`这样写，脚本只会在实例属性里创建或修改一个`name=“Jone”`的属性，`delete person1.name `只会删除`person1`的实例属性`name`（就算实例没有`name`的实例属性，也不会删除实例的原型属性）。\n\n####（3）和原型对象有关的几个方法\n- isPrototypeOf()\n`alert(Person.prototype.isPrototypeOf(person1));    //true`\n如果`person1`的`[[prototype]]`  （即`__proto__`）指向调用`isPrototypeOf`的对象即`Person.prototype`就会返回`true`。\n即判断`Person.prototype`是否是`person1`的`[[prototype]]`\n\n- Object.getPrototypeOf()\n`alert(Object.getPrototypeOf(person1)==Person.prototype);   //true`\n返回`person1`这个对象的原型`[[prototype]]`\n\n- hasOwnProperty()\n`person1.hasOwnProperty(“name”); `    如果`person1.name`是来自于`person1`的实例属性，返回`true`；如果来自于`person1`的原型属性，则返回`false`。\n\n####（4）原型与in操作符\n有两种方式使用in操作符：\n单独使用in：`alert(“name” in person1);   //true`\n在通过person1能够访问给定属性是返回true，无论属性是实例属性还是原型属性。\n在for-in循环中使用：返回的是所有能够通过对象访问的、可枚举的属性，其中包括实例属性也包括原型属性。\n\n- Object.keys()\n接受一个对象作为参数，返回一个包含对象的所有可枚举属性的字符串数组。\n如果对象是一个实例，则只返回实例的实例属性而不包含原型属性\n- Object.getOwnPropertyNames()\n```\n var keys = Object.getOwnPropertyNames(Person.prototype);\n alert(keys);   //\"constructor,name,age,job,sayName”\n```\n得到对象的所有实例属性，无论它是否可枚举\n  \n#### （5）更简单的原型语法\n所谓的更简单的原型写法就是用字面量的形式来定义构造函数的原型对象，如下：\n```\nfunction Person(){\n}\n\nPerson.prototype = {\n    name : \"Nicholas\",\n    age : 29,\n    job: \"Software Engineer\",\n    sayName : function () {\n        alert(this.name);\n    }\n\n};\n\nvar friend = new Person();\n\nalert(friend instanceof Object);  //true\nalert(friend instanceof Person);  //true\nalert(friend.constructor == Person);  //false\nalert(friend.constructor == Object);  //true\n```\n这样定义完了之后，`Person.prototype`这个对象就被重写了，导致它的`constructor`这个属性的指向变成了`Object`,而不是`Person`\n*(解释：`Person.prototype`是`Object`的一个实例，所以它有一个原型属性`constructor`指向`Object`。`Person`被创建时，它的原型对象`Person.prototype`自动获得了一个`constructor`的属性，指向`Person`，这个属性是对象的实例的实例属性，所以会屏蔽掉对象的原型属性，所以说`Person.prototype.constructor`是指向`Person`的。但是用字面量重写了`Person.prototype`后，`Person.prototype`仍是`Object`的一个实例，所以它有一个原型属性`constructor`指向`Object`，但它没有了指向`Person`的实例属性`constructor`，所以在访问`Person.prototype.constructor`时，就是访问了`Person.prototype`对象的原型属性，指向了`Object`)。*\n但我们可以再把它定义进这个对象字面量里手动指向`Person`，即给`Person.prototype`这个对象的实例加一个实例属性`constructor`，指向`Person`。如下：\n```\nfunction Person(){\n}\n\nPerson.prototype = {\n    constructor: Person,\n    name : \"Nicholas\",\n    age : 29,\n    job: \"Software Engineer\",\n    sayName : function () {\n        alert(this.name);\n    }\n};\n```\n我们知道如此定义对象，对象的属性的`[[enumerable]]`特性默认是`true`。而默认情况下，原声的原型对象的`constructor`属性是不可枚举的，因此如果你使用兼容ES5的javaScript引擎，可以使用`Object.defineProperty()`来设置`constructor`属性。如下：\n```\n//重设构造函数，只适用于ES5兼容的浏览器\nObject.difineProperty(Person.prototype,”constructor”,{\n    enumerable:false,\n    value:Person\n});\n```\n#### （6）原型的动态性\n**简单点来说，就是实例的`[[prototype]]`是指向构造函数的原型对象，而不是构造函数。**只要你明白这一点，原型的动态性就好理解了。\n第一种情况：`Person.prototype`可以在任意地方增加修改或删除属性，实例可以实时的访问最新的原型属性。因为每次实例访问属性，都是一次搜索的过程，搜索原型属性时是到实例的`[[prototype]]`指向的对象里查找。实例的`[[prototype]]`是一个指针，`Person.prototype`也是一个指针，指向的是同一个地址，也就是说修改和查找都在同一个地方，那么查找到的值自然就是最新实时的了。\n```\nfunction Person(){\n}\nvar friend = new Person();\nPerson.prototype.sayHi = function(){\n    alert(\"hi\");\n};\nfriend.sayHi();   //\"hi\"\n```\n第二种情况：在实例被创建之后，`Person.prototype`被重写了\n```\nfunction Person(){\n}\n\nvar friend = new Person();\n       \nPerson.prototype = {\n    constructor: Person,\n    name : \"Nicholas\",\n    age : 29,\n    job : \"Software Engineer\",\n    sayName : function () {\n        alert(this.name);\n    }\n};\nfriend.sayName();   //error\n```\n这种情况是因为：实例一旦被创建，实例的`[[prototype]]`存储的地址就确定了，指向的对象地址就确定了，如果你改变这个地址里的对象，实例都可以访问的到。但是如果在实例被创建之后，重写`Person.prototype`，就相当于是把`Person.prototype`指向了一个新的对象，而实例的`[[prototype]]`还是指向原来的对象，所以实例访问的原型属性还是要在原来的对象里查找，原来的对象里并没有`sayName`这个方法，因此会报错。\n\n#### （7）原生对象的原型\n我们用原型模式创建自定义类型，让自定义类型和原生类型一样使用。其实所有的原生的对象（Object、Array、String，等等）也是采用的原型模式创建的。所有原生的引用类型都在其构造函数的原型上定义了方法。\n例如，在`Array.prototype`中可以找到`sort()`方法，而在`String.prototype`中可以找到`substring()`方法。\n通过原生对象的原型，不仅可以取得所有默认方法的引用，也可以定义新的方法。可以像修改自定义对象的原型一样修改原生对象的原型，因此可以随时添加方法。但是不建议如此做*（在支持该方法的实现中运行代码时会导致命名冲突，或者意外重写了原生方法）*。\n#### （7）原型对象的问题\n**首先，原型模式省略了为构造函数传递参数，初始化实例的环节，使得所有实例默认时都是一样的。\n其次，原型模式的共享本性使得所有的实例都能共享它的属性。**\n如果属性值是函数或者是基本值时，实例不能修改原型属性的值，只会为该实例增加一个同名属性，然后屏蔽掉同名原型属性，这样其它的实例都不会受到影响，使用的仍然是原型属性原来的值。\n如果属性值是引用类型，实例虽不能修改原型属性的值（这个值就是指向的对象的地址），即实例不能让这个原型属性重新指向另一个对象，但是却可以修改指向的对象的属性，这就会导致其它实例再访问这个对象时，对象已被修改了。\n例如：\n```\nfunction Person(){\n}\n\nPerson.prototype = {\n    constructor: Person,\n    name : \"Nicholas\",\n    age : 29,\n    job : \"Software Engineer\",\n    friends : [\"Shelby\", \"Court\"],\n    sayName : function () {\n        alert(this.name);\n    }\n};\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.friends.push(\"Van\");\n\nalert(person1.friends);    //\"Shelby,Court,Van\"\nalert(person2.friends);    //\"Shelby,Court,Van\"\nalert(person1.friends === person2.friends);  //true\n```\n这样就违反了我们希望实例拥有属于自己的全部属性的初衷\n\n## 4、组合使用构造函数模式和原型模式\n**综合前面所说的，我们发现构造函数模式优点在于能向构造函数传递，定义属于实例自己的实例属性。原型模式优点在于共享着对方法的引用，原型属性是所有实例所共享的。**\n所以创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式\n例如：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.friends = [\"Shelby\", \"Court\"];\n}\n\nPerson.prototype = {\n    constructor: Person,\n    sayName : function () {\n        alert(this.name);\n    }\n};\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.friends.push(\"Van\");\n\nalert(person1.friends);    //\"Shelby,Court,Van\"\nalert(person2.friends);    //\"Shelby,Court\"\nalert(person1.friends === person2.friends);  //false\nalert(person1.sayName === person2.sayName);  //true\n```\n## 5、动态原型模式\n这一小节，私以为了解了解就好，只要你理解了上面所说的构造函数模式和原型模式的原理，那么原型属性的定义你可以随心所欲，只要符合你的预期就好。你高兴就好，代码高兴就好。\n\n## 6、寄生构造函数模式\n与工厂模式的区别是使用new 调用。不使用new调用，它就是工厂模式。\n这一小节，私以为了解了解就好。\n\n## 7、稳妥构造函数模式\n与工厂模式的区别是对象定义的方法不使用this，构造函数传进来的参数不向外直接暴露。\n这一小节，私以为了解了解就好。\n\n*好了，封装类的几种方式已经介绍完了。我的观点是理解了对象和构造函数模式以及原型模式，就可以随机应变了。不需要记住什么什么各种模式的，无非就是使用对象的场景不同。要理解对象和构造函数以及原型对象，灵活变换，无招胜有招才好。*\n\n*这是我读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，做的笔记，在本篇之前还有一篇理解对象的笔记，后面还有一篇继承的笔记。发现问题的小伙伴欢迎指出。*\n","source":"_posts/读《javaScript高级程序设计－第6章》之封装类.md","raw":"---\ntitle: 读《javaScript高级程序设计－第6章》之封装类\ndate: 2017-10-19 19:24:20\ntags: js\n---\n## 一、工厂模式\n所谓的工厂模式就是，把创建具体对象的过程抽象成了一个函数，每次调用这个函数都会返回一个相似的对象。\n```\nfunction createPerson(name, age, job){\nvar o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName = function(){\nalert(this.name);\n    };   \n    return o;\n}\nvar person1 = createPerson(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = createPerson(\"Greg\", 27, \"Doctor\");\nperson1.sayName();   //\"Nicholas\"\nperson2.sayName();   //\"Greg\"\n```\n**工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。**\n\n## 二、构造函数模式\njs里经常如此写`var obj=new Object();var arr=new Array();`，`Object`和`Array`就是构造函数，使用`new`操作符可以创建相应类型的对象，使用`instanceof`可以验证对象的类型，例如：\n`alert(arr instance Array);      //true`\n构造函数模式就是，自定义像`Array`和`Object`等这样的构造函数，并使用new操作符调用它来创建自定义类型对象的方法。\n例如：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        alert(this.name);\n    };   \n}\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.sayName();   //\"Nicholas\"\nperson2.sayName();   //“Greg”\n```\n- new操作符\n使用new操作符调用，Person就是一个构造函数\n要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历一下4个步骤：\n    （1）创建一个新对象\n    （2）将构造函数的作用域赋给新对象，即把构造函数的this指向这个新对象\n    （3）执行构造函数中的代码（为这个新对象添加属性）\n    （4）返回新对象\n\n如果不使用new，Person就是一个普通的函数，可以正常调用。例如：\n```\n//作为普通函数在全局作用域下调用\nPerson(\"Greg\", 27, \"Doctor\");  //adds to window\nwindow.sayName();   //“Greg\"\n//作为普通函数在另一个对象中调用\nvar o = new Object();\nPerson.call(o, \"Kristen\", 25, \"Nurse\");\no.sayName();    //\"Kristen\"\n```\n- 检测类型\n`alert(person1 instanceof Object);  //true`\n`alert(person1 instanceof Person);//true`\n\n综上，创建自定义的构造函数，意味着将来可以将它的实例标识为一种特定的类型（类似于Array类型，Number类型）；而这正是构造函数模式胜过工厂模式的地方。但是构造函数模式也存在缺点。\n\n- 构造函数模式的问题\n**使用构造函数的主要问题就是，每个方法都要在每个实例上重新创建一遍（实例化一次Function对象），浪费内存。**例如，person1和person2都有一个sayName()的方法，但创建person1和person2时候，定义sayName这个方法时都实例化了一个函数对象，因此person1.sayName和person2.sayName是不相等的，而事实上它们又是做的同样的事情。或者也可以这么说，person1和person2的sayName()方法做同样的事情，但却在创建对象时被实例化了两次，也就占用了两倍内存。\n虽然可以解决，但并不完美，例如：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\n\nfunction sayName(){\n    alert(this.name);\n}\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor”);\nalert(person1.sayName == person2.sayName);  //true \n```\n但是如果共享方法有很多，就需要定义很多个全局函数，那么我们的自定义的引用类型就丝毫没有封装性可言了。好在，这些问题可以通过使用原型模式解决。\n\n## 3、原型模式\n#### （1）理解原型对象\n**无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个`prototype`属性，这个属性就是该函数的原型对象。每个函数都有一个原型对象，所有原型对象都会自动获得`constructor`属性，`constructor`指向该函数（拥有该`prototype`属性的函数）。**\n例如，`Person.prototype.constructor`指向`Person`。\n创建构造函数后，其原型对象默认只会取得`constructor`属性；至于其他的方法都是从`Object`继承来的（`__proto__`）。当调用构造函数创建一个新实例后，该实例内部将包含一个指针（`__proto__`），指向构造函数的原型对象。（ECMA-262第5版中管这个指针叫`[[Prototype]]`,但在脚本中没有标准的方式访问它。在chrome，safari和firefox中都支持一个属性`__proto__`，但在其他实现中`__proto__`对脚本是不可见的）。所以和实例有直接关系的是构造函数的原型对象，而不是构造函数。\n![](../uploads/img7.png)\n上图展示了Person构造函数、Person的原型对象和Person现有的两个实例之间的关系。\n\n####（2）实例属性和原型属性：\n**原型属性即构造函数的原型对象的属性；实例属性即在实例对象上直接添加的属性。**\n例如：person1.name=“Jone”。\n通过点运算符可以访问到实例的实例属性和原型属性。**实例访问属性时，脚本会先搜索实例属性，如果找到了，则停止搜索返回实例属性的值；如果没找到就继续搜索原型属性。所以如果实例属性和原型属性同名，那么原型属性就会被屏蔽掉，无法访问到。**\n需要注意的是：**实例无法修改他的原型属性的值，也无法修改原型对象（即不能修改、删除和增加一个原型属性）**\n *（注意：实例不能修改的是原型属性的值，但是如果原型属性指向一个引用类型，原型属性的值是存储这个引用类型的地址，即不能修改原型属性指向另一个对象，但却能修改原型属性指向的对象里的属性。下面原型对象的问题里还会再讲到）*。\n如果`person1.name=“Jone”`这样写，脚本只会在实例属性里创建或修改一个`name=“Jone”`的属性，`delete person1.name `只会删除`person1`的实例属性`name`（就算实例没有`name`的实例属性，也不会删除实例的原型属性）。\n\n####（3）和原型对象有关的几个方法\n- isPrototypeOf()\n`alert(Person.prototype.isPrototypeOf(person1));    //true`\n如果`person1`的`[[prototype]]`  （即`__proto__`）指向调用`isPrototypeOf`的对象即`Person.prototype`就会返回`true`。\n即判断`Person.prototype`是否是`person1`的`[[prototype]]`\n\n- Object.getPrototypeOf()\n`alert(Object.getPrototypeOf(person1)==Person.prototype);   //true`\n返回`person1`这个对象的原型`[[prototype]]`\n\n- hasOwnProperty()\n`person1.hasOwnProperty(“name”); `    如果`person1.name`是来自于`person1`的实例属性，返回`true`；如果来自于`person1`的原型属性，则返回`false`。\n\n####（4）原型与in操作符\n有两种方式使用in操作符：\n单独使用in：`alert(“name” in person1);   //true`\n在通过person1能够访问给定属性是返回true，无论属性是实例属性还是原型属性。\n在for-in循环中使用：返回的是所有能够通过对象访问的、可枚举的属性，其中包括实例属性也包括原型属性。\n\n- Object.keys()\n接受一个对象作为参数，返回一个包含对象的所有可枚举属性的字符串数组。\n如果对象是一个实例，则只返回实例的实例属性而不包含原型属性\n- Object.getOwnPropertyNames()\n```\n var keys = Object.getOwnPropertyNames(Person.prototype);\n alert(keys);   //\"constructor,name,age,job,sayName”\n```\n得到对象的所有实例属性，无论它是否可枚举\n  \n#### （5）更简单的原型语法\n所谓的更简单的原型写法就是用字面量的形式来定义构造函数的原型对象，如下：\n```\nfunction Person(){\n}\n\nPerson.prototype = {\n    name : \"Nicholas\",\n    age : 29,\n    job: \"Software Engineer\",\n    sayName : function () {\n        alert(this.name);\n    }\n\n};\n\nvar friend = new Person();\n\nalert(friend instanceof Object);  //true\nalert(friend instanceof Person);  //true\nalert(friend.constructor == Person);  //false\nalert(friend.constructor == Object);  //true\n```\n这样定义完了之后，`Person.prototype`这个对象就被重写了，导致它的`constructor`这个属性的指向变成了`Object`,而不是`Person`\n*(解释：`Person.prototype`是`Object`的一个实例，所以它有一个原型属性`constructor`指向`Object`。`Person`被创建时，它的原型对象`Person.prototype`自动获得了一个`constructor`的属性，指向`Person`，这个属性是对象的实例的实例属性，所以会屏蔽掉对象的原型属性，所以说`Person.prototype.constructor`是指向`Person`的。但是用字面量重写了`Person.prototype`后，`Person.prototype`仍是`Object`的一个实例，所以它有一个原型属性`constructor`指向`Object`，但它没有了指向`Person`的实例属性`constructor`，所以在访问`Person.prototype.constructor`时，就是访问了`Person.prototype`对象的原型属性，指向了`Object`)。*\n但我们可以再把它定义进这个对象字面量里手动指向`Person`，即给`Person.prototype`这个对象的实例加一个实例属性`constructor`，指向`Person`。如下：\n```\nfunction Person(){\n}\n\nPerson.prototype = {\n    constructor: Person,\n    name : \"Nicholas\",\n    age : 29,\n    job: \"Software Engineer\",\n    sayName : function () {\n        alert(this.name);\n    }\n};\n```\n我们知道如此定义对象，对象的属性的`[[enumerable]]`特性默认是`true`。而默认情况下，原声的原型对象的`constructor`属性是不可枚举的，因此如果你使用兼容ES5的javaScript引擎，可以使用`Object.defineProperty()`来设置`constructor`属性。如下：\n```\n//重设构造函数，只适用于ES5兼容的浏览器\nObject.difineProperty(Person.prototype,”constructor”,{\n    enumerable:false,\n    value:Person\n});\n```\n#### （6）原型的动态性\n**简单点来说，就是实例的`[[prototype]]`是指向构造函数的原型对象，而不是构造函数。**只要你明白这一点，原型的动态性就好理解了。\n第一种情况：`Person.prototype`可以在任意地方增加修改或删除属性，实例可以实时的访问最新的原型属性。因为每次实例访问属性，都是一次搜索的过程，搜索原型属性时是到实例的`[[prototype]]`指向的对象里查找。实例的`[[prototype]]`是一个指针，`Person.prototype`也是一个指针，指向的是同一个地址，也就是说修改和查找都在同一个地方，那么查找到的值自然就是最新实时的了。\n```\nfunction Person(){\n}\nvar friend = new Person();\nPerson.prototype.sayHi = function(){\n    alert(\"hi\");\n};\nfriend.sayHi();   //\"hi\"\n```\n第二种情况：在实例被创建之后，`Person.prototype`被重写了\n```\nfunction Person(){\n}\n\nvar friend = new Person();\n       \nPerson.prototype = {\n    constructor: Person,\n    name : \"Nicholas\",\n    age : 29,\n    job : \"Software Engineer\",\n    sayName : function () {\n        alert(this.name);\n    }\n};\nfriend.sayName();   //error\n```\n这种情况是因为：实例一旦被创建，实例的`[[prototype]]`存储的地址就确定了，指向的对象地址就确定了，如果你改变这个地址里的对象，实例都可以访问的到。但是如果在实例被创建之后，重写`Person.prototype`，就相当于是把`Person.prototype`指向了一个新的对象，而实例的`[[prototype]]`还是指向原来的对象，所以实例访问的原型属性还是要在原来的对象里查找，原来的对象里并没有`sayName`这个方法，因此会报错。\n\n#### （7）原生对象的原型\n我们用原型模式创建自定义类型，让自定义类型和原生类型一样使用。其实所有的原生的对象（Object、Array、String，等等）也是采用的原型模式创建的。所有原生的引用类型都在其构造函数的原型上定义了方法。\n例如，在`Array.prototype`中可以找到`sort()`方法，而在`String.prototype`中可以找到`substring()`方法。\n通过原生对象的原型，不仅可以取得所有默认方法的引用，也可以定义新的方法。可以像修改自定义对象的原型一样修改原生对象的原型，因此可以随时添加方法。但是不建议如此做*（在支持该方法的实现中运行代码时会导致命名冲突，或者意外重写了原生方法）*。\n#### （7）原型对象的问题\n**首先，原型模式省略了为构造函数传递参数，初始化实例的环节，使得所有实例默认时都是一样的。\n其次，原型模式的共享本性使得所有的实例都能共享它的属性。**\n如果属性值是函数或者是基本值时，实例不能修改原型属性的值，只会为该实例增加一个同名属性，然后屏蔽掉同名原型属性，这样其它的实例都不会受到影响，使用的仍然是原型属性原来的值。\n如果属性值是引用类型，实例虽不能修改原型属性的值（这个值就是指向的对象的地址），即实例不能让这个原型属性重新指向另一个对象，但是却可以修改指向的对象的属性，这就会导致其它实例再访问这个对象时，对象已被修改了。\n例如：\n```\nfunction Person(){\n}\n\nPerson.prototype = {\n    constructor: Person,\n    name : \"Nicholas\",\n    age : 29,\n    job : \"Software Engineer\",\n    friends : [\"Shelby\", \"Court\"],\n    sayName : function () {\n        alert(this.name);\n    }\n};\n\nvar person1 = new Person();\nvar person2 = new Person();\n\nperson1.friends.push(\"Van\");\n\nalert(person1.friends);    //\"Shelby,Court,Van\"\nalert(person2.friends);    //\"Shelby,Court,Van\"\nalert(person1.friends === person2.friends);  //true\n```\n这样就违反了我们希望实例拥有属于自己的全部属性的初衷\n\n## 4、组合使用构造函数模式和原型模式\n**综合前面所说的，我们发现构造函数模式优点在于能向构造函数传递，定义属于实例自己的实例属性。原型模式优点在于共享着对方法的引用，原型属性是所有实例所共享的。**\n所以创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式\n例如：\n```\nfunction Person(name, age, job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.friends = [\"Shelby\", \"Court\"];\n}\n\nPerson.prototype = {\n    constructor: Person,\n    sayName : function () {\n        alert(this.name);\n    }\n};\n\nvar person1 = new Person(\"Nicholas\", 29, \"Software Engineer\");\nvar person2 = new Person(\"Greg\", 27, \"Doctor\");\n\nperson1.friends.push(\"Van\");\n\nalert(person1.friends);    //\"Shelby,Court,Van\"\nalert(person2.friends);    //\"Shelby,Court\"\nalert(person1.friends === person2.friends);  //false\nalert(person1.sayName === person2.sayName);  //true\n```\n## 5、动态原型模式\n这一小节，私以为了解了解就好，只要你理解了上面所说的构造函数模式和原型模式的原理，那么原型属性的定义你可以随心所欲，只要符合你的预期就好。你高兴就好，代码高兴就好。\n\n## 6、寄生构造函数模式\n与工厂模式的区别是使用new 调用。不使用new调用，它就是工厂模式。\n这一小节，私以为了解了解就好。\n\n## 7、稳妥构造函数模式\n与工厂模式的区别是对象定义的方法不使用this，构造函数传进来的参数不向外直接暴露。\n这一小节，私以为了解了解就好。\n\n*好了，封装类的几种方式已经介绍完了。我的观点是理解了对象和构造函数模式以及原型模式，就可以随机应变了。不需要记住什么什么各种模式的，无非就是使用对象的场景不同。要理解对象和构造函数以及原型对象，灵活变换，无招胜有招才好。*\n\n*这是我读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，做的笔记，在本篇之前还有一篇理解对象的笔记，后面还有一篇继承的笔记。发现问题的小伙伴欢迎指出。*\n","slug":"读《javaScript高级程序设计－第6章》之封装类","published":1,"updated":"2017-10-20T07:42:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zl8v9b0004sseju94lhn3w","content":"<h2 id=\"一、工厂模式\"><a href=\"#一、工厂模式\" class=\"headerlink\" title=\"一、工厂模式\"></a>一、工厂模式</h2><p>所谓的工厂模式就是，把创建具体对象的过程抽象成了一个函数，每次调用这个函数都会返回一个相似的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name, age, job)&#123;</div><div class=\"line\">var o = new Object();</div><div class=\"line\">    o.name = name;</div><div class=\"line\">    o.age = age;</div><div class=\"line\">    o.job = job;</div><div class=\"line\">    o.sayName = function()&#123;</div><div class=\"line\">alert(this.name);</div><div class=\"line\">    &#125;;   </div><div class=\"line\">    return o;</div><div class=\"line\">&#125;</div><div class=\"line\">var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = createPerson(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</div><div class=\"line\">person1.sayName();   //&quot;Nicholas&quot;</div><div class=\"line\">person2.sayName();   //&quot;Greg&quot;</div></pre></td></tr></table></figure></p>\n<p><strong>工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</strong></p>\n<h2 id=\"二、构造函数模式\"><a href=\"#二、构造函数模式\" class=\"headerlink\" title=\"二、构造函数模式\"></a>二、构造函数模式</h2><p>js里经常如此写<code>var obj=new Object();var arr=new Array();</code>，<code>Object</code>和<code>Array</code>就是构造函数，使用<code>new</code>操作符可以创建相应类型的对象，使用<code>instanceof</code>可以验证对象的类型，例如：<br><code>alert(arr instance Array);      //true</code><br>构造函数模式就是，自定义像<code>Array</code>和<code>Object</code>等这样的构造函数，并使用new操作符调用它来创建自定义类型对象的方法。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">    this.age = age;</div><div class=\"line\">    this.job = job;</div><div class=\"line\">    this.sayName = function()&#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;;   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</div><div class=\"line\"></div><div class=\"line\">person1.sayName();   //&quot;Nicholas&quot;</div><div class=\"line\">person2.sayName();   //“Greg”</div></pre></td></tr></table></figure></p>\n<ul>\n<li>new操作符<br>使用new操作符调用，Person就是一个构造函数<br>要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历一下4个步骤：<br>  （1）创建一个新对象<br>  （2）将构造函数的作用域赋给新对象，即把构造函数的this指向这个新对象<br>  （3）执行构造函数中的代码（为这个新对象添加属性）<br>  （4）返回新对象</li>\n</ul>\n<p>如果不使用new，Person就是一个普通的函数，可以正常调用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//作为普通函数在全局作用域下调用</div><div class=\"line\">Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);  //adds to window</div><div class=\"line\">window.sayName();   //“Greg&quot;</div><div class=\"line\">//作为普通函数在另一个对象中调用</div><div class=\"line\">var o = new Object();</div><div class=\"line\">Person.call(o, &quot;Kristen&quot;, 25, &quot;Nurse&quot;);</div><div class=\"line\">o.sayName();    //&quot;Kristen&quot;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>检测类型<br><code>alert(person1 instanceof Object);  //true</code><br><code>alert(person1 instanceof Person);//true</code></li>\n</ul>\n<p>综上，创建自定义的构造函数，意味着将来可以将它的实例标识为一种特定的类型（类似于Array类型，Number类型）；而这正是构造函数模式胜过工厂模式的地方。但是构造函数模式也存在缺点。</p>\n<ul>\n<li>构造函数模式的问题<br><strong>使用构造函数的主要问题就是，每个方法都要在每个实例上重新创建一遍（实例化一次Function对象），浪费内存。</strong>例如，person1和person2都有一个sayName()的方法，但创建person1和person2时候，定义sayName这个方法时都实例化了一个函数对象，因此person1.sayName和person2.sayName是不相等的，而事实上它们又是做的同样的事情。或者也可以这么说，person1和person2的sayName()方法做同样的事情，但却在创建对象时被实例化了两次，也就占用了两倍内存。<br>虽然可以解决，但并不完美，例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">    this.age = age;</div><div class=\"line\">    this.job = job;</div><div class=\"line\">    this.sayName = sayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function sayName()&#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor”);</div><div class=\"line\">alert(person1.sayName == person2.sayName);  //true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>但是如果共享方法有很多，就需要定义很多个全局函数，那么我们的自定义的引用类型就丝毫没有封装性可言了。好在，这些问题可以通过使用原型模式解决。</p>\n<h2 id=\"3、原型模式\"><a href=\"#3、原型模式\" class=\"headerlink\" title=\"3、原型模式\"></a>3、原型模式</h2><h4 id=\"（1）理解原型对象\"><a href=\"#（1）理解原型对象\" class=\"headerlink\" title=\"（1）理解原型对象\"></a>（1）理解原型对象</h4><p><strong>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个<code>prototype</code>属性，这个属性就是该函数的原型对象。每个函数都有一个原型对象，所有原型对象都会自动获得<code>constructor</code>属性，<code>constructor</code>指向该函数（拥有该<code>prototype</code>属性的函数）。</strong><br>例如，<code>Person.prototype.constructor</code>指向<code>Person</code>。<br>创建构造函数后，其原型对象默认只会取得<code>constructor</code>属性；至于其他的方法都是从<code>Object</code>继承来的（<code>__proto__</code>）。当调用构造函数创建一个新实例后，该实例内部将包含一个指针（<code>__proto__</code>），指向构造函数的原型对象。（ECMA-262第5版中管这个指针叫<code>[[Prototype]]</code>,但在脚本中没有标准的方式访问它。在chrome，safari和firefox中都支持一个属性<code>__proto__</code>，但在其他实现中<code>__proto__</code>对脚本是不可见的）。所以和实例有直接关系的是构造函数的原型对象，而不是构造函数。<br><img src=\"../uploads/img7.png\" alt=\"\"><br>上图展示了Person构造函数、Person的原型对象和Person现有的两个实例之间的关系。</p>\n<p>####（2）实例属性和原型属性：<br><strong>原型属性即构造函数的原型对象的属性；实例属性即在实例对象上直接添加的属性。</strong><br>例如：person1.name=“Jone”。<br>通过点运算符可以访问到实例的实例属性和原型属性。<strong>实例访问属性时，脚本会先搜索实例属性，如果找到了，则停止搜索返回实例属性的值；如果没找到就继续搜索原型属性。所以如果实例属性和原型属性同名，那么原型属性就会被屏蔽掉，无法访问到。</strong><br>需要注意的是：<strong>实例无法修改他的原型属性的值，也无法修改原型对象（即不能修改、删除和增加一个原型属性）</strong><br> <em>（注意：实例不能修改的是原型属性的值，但是如果原型属性指向一个引用类型，原型属性的值是存储这个引用类型的地址，即不能修改原型属性指向另一个对象，但却能修改原型属性指向的对象里的属性。下面原型对象的问题里还会再讲到）</em>。<br>如果<code>person1.name=“Jone”</code>这样写，脚本只会在实例属性里创建或修改一个<code>name=“Jone”</code>的属性，<code>delete person1.name</code>只会删除<code>person1</code>的实例属性<code>name</code>（就算实例没有<code>name</code>的实例属性，也不会删除实例的原型属性）。</p>\n<p>####（3）和原型对象有关的几个方法</p>\n<ul>\n<li><p>isPrototypeOf()<br><code>alert(Person.prototype.isPrototypeOf(person1));    //true</code><br>如果<code>person1</code>的<code>[[prototype]]</code>  （即<code>__proto__</code>）指向调用<code>isPrototypeOf</code>的对象即<code>Person.prototype</code>就会返回<code>true</code>。<br>即判断<code>Person.prototype</code>是否是<code>person1</code>的<code>[[prototype]]</code></p>\n</li>\n<li><p>Object.getPrototypeOf()<br><code>alert(Object.getPrototypeOf(person1)==Person.prototype);   //true</code><br>返回<code>person1</code>这个对象的原型<code>[[prototype]]</code></p>\n</li>\n<li><p>hasOwnProperty()<br><code>person1.hasOwnProperty(“name”);</code>    如果<code>person1.name</code>是来自于<code>person1</code>的实例属性，返回<code>true</code>；如果来自于<code>person1</code>的原型属性，则返回<code>false</code>。</p>\n</li>\n</ul>\n<p>####（4）原型与in操作符<br>有两种方式使用in操作符：<br>单独使用in：<code>alert(“name” in person1);   //true</code><br>在通过person1能够访问给定属性是返回true，无论属性是实例属性还是原型属性。<br>在for-in循环中使用：返回的是所有能够通过对象访问的、可枚举的属性，其中包括实例属性也包括原型属性。</p>\n<ul>\n<li>Object.keys()<br>接受一个对象作为参数，返回一个包含对象的所有可枚举属性的字符串数组。<br>如果对象是一个实例，则只返回实例的实例属性而不包含原型属性</li>\n<li>Object.getOwnPropertyNames()<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var keys = Object.getOwnPropertyNames(Person.prototype);</div><div class=\"line\"> alert(keys);   //&quot;constructor,name,age,job,sayName”</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>得到对象的所有实例属性，无论它是否可枚举</p>\n<h4 id=\"（5）更简单的原型语法\"><a href=\"#（5）更简单的原型语法\" class=\"headerlink\" title=\"（5）更简单的原型语法\"></a>（5）更简单的原型语法</h4><p>所谓的更简单的原型写法就是用字面量的形式来定义构造函数的原型对象，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job: &quot;Software Engineer&quot;,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var friend = new Person();</div><div class=\"line\"></div><div class=\"line\">alert(friend instanceof Object);  //true</div><div class=\"line\">alert(friend instanceof Person);  //true</div><div class=\"line\">alert(friend.constructor == Person);  //false</div><div class=\"line\">alert(friend.constructor == Object);  //true</div></pre></td></tr></table></figure></p>\n<p>这样定义完了之后，<code>Person.prototype</code>这个对象就被重写了，导致它的<code>constructor</code>这个属性的指向变成了<code>Object</code>,而不是<code>Person</code><br><em>(解释：<code>Person.prototype</code>是<code>Object</code>的一个实例，所以它有一个原型属性<code>constructor</code>指向<code>Object</code>。<code>Person</code>被创建时，它的原型对象<code>Person.prototype</code>自动获得了一个<code>constructor</code>的属性，指向<code>Person</code>，这个属性是对象的实例的实例属性，所以会屏蔽掉对象的原型属性，所以说<code>Person.prototype.constructor</code>是指向<code>Person</code>的。但是用字面量重写了<code>Person.prototype</code>后，<code>Person.prototype</code>仍是<code>Object</code>的一个实例，所以它有一个原型属性<code>constructor</code>指向<code>Object</code>，但它没有了指向<code>Person</code>的实例属性<code>constructor</code>，所以在访问<code>Person.prototype.constructor</code>时，就是访问了<code>Person.prototype</code>对象的原型属性，指向了<code>Object</code>)。</em><br>但我们可以再把它定义进这个对象字面量里手动指向<code>Person</code>，即给<code>Person.prototype</code>这个对象的实例加一个实例属性<code>constructor</code>，指向<code>Person</code>。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job: &quot;Software Engineer&quot;,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们知道如此定义对象，对象的属性的<code>[[enumerable]]</code>特性默认是<code>true</code>。而默认情况下，原声的原型对象的<code>constructor</code>属性是不可枚举的，因此如果你使用兼容ES5的javaScript引擎，可以使用<code>Object.defineProperty()</code>来设置<code>constructor</code>属性。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//重设构造函数，只适用于ES5兼容的浏览器</div><div class=\"line\">Object.difineProperty(Person.prototype,”constructor”,&#123;</div><div class=\"line\">    enumerable:false,</div><div class=\"line\">    value:Person</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"（6）原型的动态性\"><a href=\"#（6）原型的动态性\" class=\"headerlink\" title=\"（6）原型的动态性\"></a>（6）原型的动态性</h4><p><strong>简单点来说，就是实例的<code>[[prototype]]</code>是指向构造函数的原型对象，而不是构造函数。</strong>只要你明白这一点，原型的动态性就好理解了。<br>第一种情况：<code>Person.prototype</code>可以在任意地方增加修改或删除属性，实例可以实时的访问最新的原型属性。因为每次实例访问属性，都是一次搜索的过程，搜索原型属性时是到实例的<code>[[prototype]]</code>指向的对象里查找。实例的<code>[[prototype]]</code>是一个指针，<code>Person.prototype</code>也是一个指针，指向的是同一个地址，也就是说修改和查找都在同一个地方，那么查找到的值自然就是最新实时的了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">var friend = new Person();</div><div class=\"line\">Person.prototype.sayHi = function()&#123;</div><div class=\"line\">    alert(&quot;hi&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">friend.sayHi();   //&quot;hi&quot;</div></pre></td></tr></table></figure></p>\n<p>第二种情况：在实例被创建之后，<code>Person.prototype</code>被重写了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var friend = new Person();</div><div class=\"line\">       </div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job : &quot;Software Engineer&quot;,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">friend.sayName();   //error</div></pre></td></tr></table></figure></p>\n<p>这种情况是因为：实例一旦被创建，实例的<code>[[prototype]]</code>存储的地址就确定了，指向的对象地址就确定了，如果你改变这个地址里的对象，实例都可以访问的到。但是如果在实例被创建之后，重写<code>Person.prototype</code>，就相当于是把<code>Person.prototype</code>指向了一个新的对象，而实例的<code>[[prototype]]</code>还是指向原来的对象，所以实例访问的原型属性还是要在原来的对象里查找，原来的对象里并没有<code>sayName</code>这个方法，因此会报错。</p>\n<h4 id=\"（7）原生对象的原型\"><a href=\"#（7）原生对象的原型\" class=\"headerlink\" title=\"（7）原生对象的原型\"></a>（7）原生对象的原型</h4><p>我们用原型模式创建自定义类型，让自定义类型和原生类型一样使用。其实所有的原生的对象（Object、Array、String，等等）也是采用的原型模式创建的。所有原生的引用类型都在其构造函数的原型上定义了方法。<br>例如，在<code>Array.prototype</code>中可以找到<code>sort()</code>方法，而在<code>String.prototype</code>中可以找到<code>substring()</code>方法。<br>通过原生对象的原型，不仅可以取得所有默认方法的引用，也可以定义新的方法。可以像修改自定义对象的原型一样修改原生对象的原型，因此可以随时添加方法。但是不建议如此做<em>（在支持该方法的实现中运行代码时会导致命名冲突，或者意外重写了原生方法）</em>。</p>\n<h4 id=\"（7）原型对象的问题\"><a href=\"#（7）原型对象的问题\" class=\"headerlink\" title=\"（7）原型对象的问题\"></a>（7）原型对象的问题</h4><p><strong>首先，原型模式省略了为构造函数传递参数，初始化实例的环节，使得所有实例默认时都是一样的。<br>其次，原型模式的共享本性使得所有的实例都能共享它的属性。</strong><br>如果属性值是函数或者是基本值时，实例不能修改原型属性的值，只会为该实例增加一个同名属性，然后屏蔽掉同名原型属性，这样其它的实例都不会受到影响，使用的仍然是原型属性原来的值。<br>如果属性值是引用类型，实例虽不能修改原型属性的值（这个值就是指向的对象的地址），即实例不能让这个原型属性重新指向另一个对象，但是却可以修改指向的对象的属性，这就会导致其它实例再访问这个对象时，对象已被修改了。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job : &quot;Software Engineer&quot;,</div><div class=\"line\">    friends : [&quot;Shelby&quot;, &quot;Court&quot;],</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">var person2 = new Person();</div><div class=\"line\"></div><div class=\"line\">person1.friends.push(&quot;Van&quot;);</div><div class=\"line\"></div><div class=\"line\">alert(person1.friends);    //&quot;Shelby,Court,Van&quot;</div><div class=\"line\">alert(person2.friends);    //&quot;Shelby,Court,Van&quot;</div><div class=\"line\">alert(person1.friends === person2.friends);  //true</div></pre></td></tr></table></figure></p>\n<p>这样就违反了我们希望实例拥有属于自己的全部属性的初衷</p>\n<h2 id=\"4、组合使用构造函数模式和原型模式\"><a href=\"#4、组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4、组合使用构造函数模式和原型模式\"></a>4、组合使用构造函数模式和原型模式</h2><p><strong>综合前面所说的，我们发现构造函数模式优点在于能向构造函数传递，定义属于实例自己的实例属性。原型模式优点在于共享着对方法的引用，原型属性是所有实例所共享的。</strong><br>所以创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">    this.age = age;</div><div class=\"line\">    this.job = job;</div><div class=\"line\">    this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</div><div class=\"line\"></div><div class=\"line\">person1.friends.push(&quot;Van&quot;);</div><div class=\"line\"></div><div class=\"line\">alert(person1.friends);    //&quot;Shelby,Court,Van&quot;</div><div class=\"line\">alert(person2.friends);    //&quot;Shelby,Court&quot;</div><div class=\"line\">alert(person1.friends === person2.friends);  //false</div><div class=\"line\">alert(person1.sayName === person2.sayName);  //true</div></pre></td></tr></table></figure></p>\n<h2 id=\"5、动态原型模式\"><a href=\"#5、动态原型模式\" class=\"headerlink\" title=\"5、动态原型模式\"></a>5、动态原型模式</h2><p>这一小节，私以为了解了解就好，只要你理解了上面所说的构造函数模式和原型模式的原理，那么原型属性的定义你可以随心所欲，只要符合你的预期就好。你高兴就好，代码高兴就好。</p>\n<h2 id=\"6、寄生构造函数模式\"><a href=\"#6、寄生构造函数模式\" class=\"headerlink\" title=\"6、寄生构造函数模式\"></a>6、寄生构造函数模式</h2><p>与工厂模式的区别是使用new 调用。不使用new调用，它就是工厂模式。<br>这一小节，私以为了解了解就好。</p>\n<h2 id=\"7、稳妥构造函数模式\"><a href=\"#7、稳妥构造函数模式\" class=\"headerlink\" title=\"7、稳妥构造函数模式\"></a>7、稳妥构造函数模式</h2><p>与工厂模式的区别是对象定义的方法不使用this，构造函数传进来的参数不向外直接暴露。<br>这一小节，私以为了解了解就好。</p>\n<p><em>好了，封装类的几种方式已经介绍完了。我的观点是理解了对象和构造函数模式以及原型模式，就可以随机应变了。不需要记住什么什么各种模式的，无非就是使用对象的场景不同。要理解对象和构造函数以及原型对象，灵活变换，无招胜有招才好。</em></p>\n<p><em>这是我读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，做的笔记，在本篇之前还有一篇理解对象的笔记，后面还有一篇继承的笔记。发现问题的小伙伴欢迎指出。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、工厂模式\"><a href=\"#一、工厂模式\" class=\"headerlink\" title=\"一、工厂模式\"></a>一、工厂模式</h2><p>所谓的工厂模式就是，把创建具体对象的过程抽象成了一个函数，每次调用这个函数都会返回一个相似的对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name, age, job)&#123;</div><div class=\"line\">var o = new Object();</div><div class=\"line\">    o.name = name;</div><div class=\"line\">    o.age = age;</div><div class=\"line\">    o.job = job;</div><div class=\"line\">    o.sayName = function()&#123;</div><div class=\"line\">alert(this.name);</div><div class=\"line\">    &#125;;   </div><div class=\"line\">    return o;</div><div class=\"line\">&#125;</div><div class=\"line\">var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = createPerson(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</div><div class=\"line\">person1.sayName();   //&quot;Nicholas&quot;</div><div class=\"line\">person2.sayName();   //&quot;Greg&quot;</div></pre></td></tr></table></figure></p>\n<p><strong>工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</strong></p>\n<h2 id=\"二、构造函数模式\"><a href=\"#二、构造函数模式\" class=\"headerlink\" title=\"二、构造函数模式\"></a>二、构造函数模式</h2><p>js里经常如此写<code>var obj=new Object();var arr=new Array();</code>，<code>Object</code>和<code>Array</code>就是构造函数，使用<code>new</code>操作符可以创建相应类型的对象，使用<code>instanceof</code>可以验证对象的类型，例如：<br><code>alert(arr instance Array);      //true</code><br>构造函数模式就是，自定义像<code>Array</code>和<code>Object</code>等这样的构造函数，并使用new操作符调用它来创建自定义类型对象的方法。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">    this.age = age;</div><div class=\"line\">    this.job = job;</div><div class=\"line\">    this.sayName = function()&#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;;   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</div><div class=\"line\"></div><div class=\"line\">person1.sayName();   //&quot;Nicholas&quot;</div><div class=\"line\">person2.sayName();   //“Greg”</div></pre></td></tr></table></figure></p>\n<ul>\n<li>new操作符<br>使用new操作符调用，Person就是一个构造函数<br>要创建Person的新实例，必须使用new操作符。以这种方式调用构造函数实际上会经历一下4个步骤：<br>  （1）创建一个新对象<br>  （2）将构造函数的作用域赋给新对象，即把构造函数的this指向这个新对象<br>  （3）执行构造函数中的代码（为这个新对象添加属性）<br>  （4）返回新对象</li>\n</ul>\n<p>如果不使用new，Person就是一个普通的函数，可以正常调用。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//作为普通函数在全局作用域下调用</div><div class=\"line\">Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);  //adds to window</div><div class=\"line\">window.sayName();   //“Greg&quot;</div><div class=\"line\">//作为普通函数在另一个对象中调用</div><div class=\"line\">var o = new Object();</div><div class=\"line\">Person.call(o, &quot;Kristen&quot;, 25, &quot;Nurse&quot;);</div><div class=\"line\">o.sayName();    //&quot;Kristen&quot;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>检测类型<br><code>alert(person1 instanceof Object);  //true</code><br><code>alert(person1 instanceof Person);//true</code></li>\n</ul>\n<p>综上，创建自定义的构造函数，意味着将来可以将它的实例标识为一种特定的类型（类似于Array类型，Number类型）；而这正是构造函数模式胜过工厂模式的地方。但是构造函数模式也存在缺点。</p>\n<ul>\n<li>构造函数模式的问题<br><strong>使用构造函数的主要问题就是，每个方法都要在每个实例上重新创建一遍（实例化一次Function对象），浪费内存。</strong>例如，person1和person2都有一个sayName()的方法，但创建person1和person2时候，定义sayName这个方法时都实例化了一个函数对象，因此person1.sayName和person2.sayName是不相等的，而事实上它们又是做的同样的事情。或者也可以这么说，person1和person2的sayName()方法做同样的事情，但却在创建对象时被实例化了两次，也就占用了两倍内存。<br>虽然可以解决，但并不完美，例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">    this.age = age;</div><div class=\"line\">    this.job = job;</div><div class=\"line\">    this.sayName = sayName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function sayName()&#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor”);</div><div class=\"line\">alert(person1.sayName == person2.sayName);  //true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>但是如果共享方法有很多，就需要定义很多个全局函数，那么我们的自定义的引用类型就丝毫没有封装性可言了。好在，这些问题可以通过使用原型模式解决。</p>\n<h2 id=\"3、原型模式\"><a href=\"#3、原型模式\" class=\"headerlink\" title=\"3、原型模式\"></a>3、原型模式</h2><h4 id=\"（1）理解原型对象\"><a href=\"#（1）理解原型对象\" class=\"headerlink\" title=\"（1）理解原型对象\"></a>（1）理解原型对象</h4><p><strong>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个<code>prototype</code>属性，这个属性就是该函数的原型对象。每个函数都有一个原型对象，所有原型对象都会自动获得<code>constructor</code>属性，<code>constructor</code>指向该函数（拥有该<code>prototype</code>属性的函数）。</strong><br>例如，<code>Person.prototype.constructor</code>指向<code>Person</code>。<br>创建构造函数后，其原型对象默认只会取得<code>constructor</code>属性；至于其他的方法都是从<code>Object</code>继承来的（<code>__proto__</code>）。当调用构造函数创建一个新实例后，该实例内部将包含一个指针（<code>__proto__</code>），指向构造函数的原型对象。（ECMA-262第5版中管这个指针叫<code>[[Prototype]]</code>,但在脚本中没有标准的方式访问它。在chrome，safari和firefox中都支持一个属性<code>__proto__</code>，但在其他实现中<code>__proto__</code>对脚本是不可见的）。所以和实例有直接关系的是构造函数的原型对象，而不是构造函数。<br><img src=\"../uploads/img7.png\" alt=\"\"><br>上图展示了Person构造函数、Person的原型对象和Person现有的两个实例之间的关系。</p>\n<p>####（2）实例属性和原型属性：<br><strong>原型属性即构造函数的原型对象的属性；实例属性即在实例对象上直接添加的属性。</strong><br>例如：person1.name=“Jone”。<br>通过点运算符可以访问到实例的实例属性和原型属性。<strong>实例访问属性时，脚本会先搜索实例属性，如果找到了，则停止搜索返回实例属性的值；如果没找到就继续搜索原型属性。所以如果实例属性和原型属性同名，那么原型属性就会被屏蔽掉，无法访问到。</strong><br>需要注意的是：<strong>实例无法修改他的原型属性的值，也无法修改原型对象（即不能修改、删除和增加一个原型属性）</strong><br> <em>（注意：实例不能修改的是原型属性的值，但是如果原型属性指向一个引用类型，原型属性的值是存储这个引用类型的地址，即不能修改原型属性指向另一个对象，但却能修改原型属性指向的对象里的属性。下面原型对象的问题里还会再讲到）</em>。<br>如果<code>person1.name=“Jone”</code>这样写，脚本只会在实例属性里创建或修改一个<code>name=“Jone”</code>的属性，<code>delete person1.name</code>只会删除<code>person1</code>的实例属性<code>name</code>（就算实例没有<code>name</code>的实例属性，也不会删除实例的原型属性）。</p>\n<p>####（3）和原型对象有关的几个方法</p>\n<ul>\n<li><p>isPrototypeOf()<br><code>alert(Person.prototype.isPrototypeOf(person1));    //true</code><br>如果<code>person1</code>的<code>[[prototype]]</code>  （即<code>__proto__</code>）指向调用<code>isPrototypeOf</code>的对象即<code>Person.prototype</code>就会返回<code>true</code>。<br>即判断<code>Person.prototype</code>是否是<code>person1</code>的<code>[[prototype]]</code></p>\n</li>\n<li><p>Object.getPrototypeOf()<br><code>alert(Object.getPrototypeOf(person1)==Person.prototype);   //true</code><br>返回<code>person1</code>这个对象的原型<code>[[prototype]]</code></p>\n</li>\n<li><p>hasOwnProperty()<br><code>person1.hasOwnProperty(“name”);</code>    如果<code>person1.name</code>是来自于<code>person1</code>的实例属性，返回<code>true</code>；如果来自于<code>person1</code>的原型属性，则返回<code>false</code>。</p>\n</li>\n</ul>\n<p>####（4）原型与in操作符<br>有两种方式使用in操作符：<br>单独使用in：<code>alert(“name” in person1);   //true</code><br>在通过person1能够访问给定属性是返回true，无论属性是实例属性还是原型属性。<br>在for-in循环中使用：返回的是所有能够通过对象访问的、可枚举的属性，其中包括实例属性也包括原型属性。</p>\n<ul>\n<li>Object.keys()<br>接受一个对象作为参数，返回一个包含对象的所有可枚举属性的字符串数组。<br>如果对象是一个实例，则只返回实例的实例属性而不包含原型属性</li>\n<li>Object.getOwnPropertyNames()<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var keys = Object.getOwnPropertyNames(Person.prototype);</div><div class=\"line\"> alert(keys);   //&quot;constructor,name,age,job,sayName”</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>得到对象的所有实例属性，无论它是否可枚举</p>\n<h4 id=\"（5）更简单的原型语法\"><a href=\"#（5）更简单的原型语法\" class=\"headerlink\" title=\"（5）更简单的原型语法\"></a>（5）更简单的原型语法</h4><p>所谓的更简单的原型写法就是用字面量的形式来定义构造函数的原型对象，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job: &quot;Software Engineer&quot;,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var friend = new Person();</div><div class=\"line\"></div><div class=\"line\">alert(friend instanceof Object);  //true</div><div class=\"line\">alert(friend instanceof Person);  //true</div><div class=\"line\">alert(friend.constructor == Person);  //false</div><div class=\"line\">alert(friend.constructor == Object);  //true</div></pre></td></tr></table></figure></p>\n<p>这样定义完了之后，<code>Person.prototype</code>这个对象就被重写了，导致它的<code>constructor</code>这个属性的指向变成了<code>Object</code>,而不是<code>Person</code><br><em>(解释：<code>Person.prototype</code>是<code>Object</code>的一个实例，所以它有一个原型属性<code>constructor</code>指向<code>Object</code>。<code>Person</code>被创建时，它的原型对象<code>Person.prototype</code>自动获得了一个<code>constructor</code>的属性，指向<code>Person</code>，这个属性是对象的实例的实例属性，所以会屏蔽掉对象的原型属性，所以说<code>Person.prototype.constructor</code>是指向<code>Person</code>的。但是用字面量重写了<code>Person.prototype</code>后，<code>Person.prototype</code>仍是<code>Object</code>的一个实例，所以它有一个原型属性<code>constructor</code>指向<code>Object</code>，但它没有了指向<code>Person</code>的实例属性<code>constructor</code>，所以在访问<code>Person.prototype.constructor</code>时，就是访问了<code>Person.prototype</code>对象的原型属性，指向了<code>Object</code>)。</em><br>但我们可以再把它定义进这个对象字面量里手动指向<code>Person</code>，即给<code>Person.prototype</code>这个对象的实例加一个实例属性<code>constructor</code>，指向<code>Person</code>。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job: &quot;Software Engineer&quot;,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们知道如此定义对象，对象的属性的<code>[[enumerable]]</code>特性默认是<code>true</code>。而默认情况下，原声的原型对象的<code>constructor</code>属性是不可枚举的，因此如果你使用兼容ES5的javaScript引擎，可以使用<code>Object.defineProperty()</code>来设置<code>constructor</code>属性。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//重设构造函数，只适用于ES5兼容的浏览器</div><div class=\"line\">Object.difineProperty(Person.prototype,”constructor”,&#123;</div><div class=\"line\">    enumerable:false,</div><div class=\"line\">    value:Person</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"（6）原型的动态性\"><a href=\"#（6）原型的动态性\" class=\"headerlink\" title=\"（6）原型的动态性\"></a>（6）原型的动态性</h4><p><strong>简单点来说，就是实例的<code>[[prototype]]</code>是指向构造函数的原型对象，而不是构造函数。</strong>只要你明白这一点，原型的动态性就好理解了。<br>第一种情况：<code>Person.prototype</code>可以在任意地方增加修改或删除属性，实例可以实时的访问最新的原型属性。因为每次实例访问属性，都是一次搜索的过程，搜索原型属性时是到实例的<code>[[prototype]]</code>指向的对象里查找。实例的<code>[[prototype]]</code>是一个指针，<code>Person.prototype</code>也是一个指针，指向的是同一个地址，也就是说修改和查找都在同一个地方，那么查找到的值自然就是最新实时的了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">var friend = new Person();</div><div class=\"line\">Person.prototype.sayHi = function()&#123;</div><div class=\"line\">    alert(&quot;hi&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">friend.sayHi();   //&quot;hi&quot;</div></pre></td></tr></table></figure></p>\n<p>第二种情况：在实例被创建之后，<code>Person.prototype</code>被重写了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var friend = new Person();</div><div class=\"line\">       </div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job : &quot;Software Engineer&quot;,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">friend.sayName();   //error</div></pre></td></tr></table></figure></p>\n<p>这种情况是因为：实例一旦被创建，实例的<code>[[prototype]]</code>存储的地址就确定了，指向的对象地址就确定了，如果你改变这个地址里的对象，实例都可以访问的到。但是如果在实例被创建之后，重写<code>Person.prototype</code>，就相当于是把<code>Person.prototype</code>指向了一个新的对象，而实例的<code>[[prototype]]</code>还是指向原来的对象，所以实例访问的原型属性还是要在原来的对象里查找，原来的对象里并没有<code>sayName</code>这个方法，因此会报错。</p>\n<h4 id=\"（7）原生对象的原型\"><a href=\"#（7）原生对象的原型\" class=\"headerlink\" title=\"（7）原生对象的原型\"></a>（7）原生对象的原型</h4><p>我们用原型模式创建自定义类型，让自定义类型和原生类型一样使用。其实所有的原生的对象（Object、Array、String，等等）也是采用的原型模式创建的。所有原生的引用类型都在其构造函数的原型上定义了方法。<br>例如，在<code>Array.prototype</code>中可以找到<code>sort()</code>方法，而在<code>String.prototype</code>中可以找到<code>substring()</code>方法。<br>通过原生对象的原型，不仅可以取得所有默认方法的引用，也可以定义新的方法。可以像修改自定义对象的原型一样修改原生对象的原型，因此可以随时添加方法。但是不建议如此做<em>（在支持该方法的实现中运行代码时会导致命名冲突，或者意外重写了原生方法）</em>。</p>\n<h4 id=\"（7）原型对象的问题\"><a href=\"#（7）原型对象的问题\" class=\"headerlink\" title=\"（7）原型对象的问题\"></a>（7）原型对象的问题</h4><p><strong>首先，原型模式省略了为构造函数传递参数，初始化实例的环节，使得所有实例默认时都是一样的。<br>其次，原型模式的共享本性使得所有的实例都能共享它的属性。</strong><br>如果属性值是函数或者是基本值时，实例不能修改原型属性的值，只会为该实例增加一个同名属性，然后屏蔽掉同名原型属性，这样其它的实例都不会受到影响，使用的仍然是原型属性原来的值。<br>如果属性值是引用类型，实例虽不能修改原型属性的值（这个值就是指向的对象的地址），即实例不能让这个原型属性重新指向另一个对象，但是却可以修改指向的对象的属性，这就会导致其它实例再访问这个对象时，对象已被修改了。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    name : &quot;Nicholas&quot;,</div><div class=\"line\">    age : 29,</div><div class=\"line\">    job : &quot;Software Engineer&quot;,</div><div class=\"line\">    friends : [&quot;Shelby&quot;, &quot;Court&quot;],</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">var person2 = new Person();</div><div class=\"line\"></div><div class=\"line\">person1.friends.push(&quot;Van&quot;);</div><div class=\"line\"></div><div class=\"line\">alert(person1.friends);    //&quot;Shelby,Court,Van&quot;</div><div class=\"line\">alert(person2.friends);    //&quot;Shelby,Court,Van&quot;</div><div class=\"line\">alert(person1.friends === person2.friends);  //true</div></pre></td></tr></table></figure></p>\n<p>这样就违反了我们希望实例拥有属于自己的全部属性的初衷</p>\n<h2 id=\"4、组合使用构造函数模式和原型模式\"><a href=\"#4、组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4、组合使用构造函数模式和原型模式\"></a>4、组合使用构造函数模式和原型模式</h2><p><strong>综合前面所说的，我们发现构造函数模式优点在于能向构造函数传递，定义属于实例自己的实例属性。原型模式优点在于共享着对方法的引用，原型属性是所有实例所共享的。</strong><br>所以创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">    this.age = age;</div><div class=\"line\">    this.job = job;</div><div class=\"line\">    this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    constructor: Person,</div><div class=\"line\">    sayName : function () &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</div><div class=\"line\"></div><div class=\"line\">person1.friends.push(&quot;Van&quot;);</div><div class=\"line\"></div><div class=\"line\">alert(person1.friends);    //&quot;Shelby,Court,Van&quot;</div><div class=\"line\">alert(person2.friends);    //&quot;Shelby,Court&quot;</div><div class=\"line\">alert(person1.friends === person2.friends);  //false</div><div class=\"line\">alert(person1.sayName === person2.sayName);  //true</div></pre></td></tr></table></figure></p>\n<h2 id=\"5、动态原型模式\"><a href=\"#5、动态原型模式\" class=\"headerlink\" title=\"5、动态原型模式\"></a>5、动态原型模式</h2><p>这一小节，私以为了解了解就好，只要你理解了上面所说的构造函数模式和原型模式的原理，那么原型属性的定义你可以随心所欲，只要符合你的预期就好。你高兴就好，代码高兴就好。</p>\n<h2 id=\"6、寄生构造函数模式\"><a href=\"#6、寄生构造函数模式\" class=\"headerlink\" title=\"6、寄生构造函数模式\"></a>6、寄生构造函数模式</h2><p>与工厂模式的区别是使用new 调用。不使用new调用，它就是工厂模式。<br>这一小节，私以为了解了解就好。</p>\n<h2 id=\"7、稳妥构造函数模式\"><a href=\"#7、稳妥构造函数模式\" class=\"headerlink\" title=\"7、稳妥构造函数模式\"></a>7、稳妥构造函数模式</h2><p>与工厂模式的区别是对象定义的方法不使用this，构造函数传进来的参数不向外直接暴露。<br>这一小节，私以为了解了解就好。</p>\n<p><em>好了，封装类的几种方式已经介绍完了。我的观点是理解了对象和构造函数模式以及原型模式，就可以随机应变了。不需要记住什么什么各种模式的，无非就是使用对象的场景不同。要理解对象和构造函数以及原型对象，灵活变换，无招胜有招才好。</em></p>\n<p><em>这是我读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，做的笔记，在本篇之前还有一篇理解对象的笔记，后面还有一篇继承的笔记。发现问题的小伙伴欢迎指出。</em></p>\n"},{"title":"读《javaScript高级程序设计－第6章》之理解对象","date":"2017-10-18T11:10:13.000Z","_content":"ECMA－262把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。所以，我们可以理解对象就是名值对的集合，名就是对象的每个属性的名字，而每个名字都映射到一个值。\n## 一、创建对象\n创建对象有两种方式：\n#### 方式一\n```\nvar person=new Object();\nperson.name=“Jone”;\nperson.age=20;\nperson.job=“Software Engineer”;\n\nperson.sayName=function(){\n    alert(this.name);\n};\n```\n#### 方式二\n```\nvar person={\n    name:”Jone”,\n    age:20,\n    job:“Software Engineer”,\n    \n    sayName:function(){\n        alert(this.name);\n    }\n};\n```\n这两种方式创建的对象都是一样的。也可以灵活的混合使用，但要记住`var person=new Object()`和\n```\nvar person={\n    name:”Jone”,\n    age:20,\n    job:“Software Engineer”,\n    \n    sayName:function(){\n        alert(this.name);\n    }\n}\n```\n都是在为person赋值，**不可重复赋值，如果重复使用就相当于前面的值放弃，使用后来重新赋的值。或者说都是在给person指向了一个新的地址，地址里存着新的对象。person确定是一个引用类型了，就可以在任意的地方用点来为它添加属性和访问属性，例如：`person.sex=“女”`。person用点访问时不会再为person更改指向地址，更改的是地址里存着的对象。**\n## 二、对象属性的特性\n对象的属性可以分为两种属性：数据属性，访问器属性。两种类型的属性有各自的特性。\n\n- 数据属性：\n```\n[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[enumerable]]:表示能否通过for-in循环返回属性。\n[[writable]]:表示能否修改属性的值。\n[[value]]:包含这个属性的数据值。读取属性值的时候，从这个位置读取；写入属性值的时候，把新值保存在这个位置。这个特性的默认值是undefined。\n像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable、writable这些特性默认值为true。\n```\n\n- 访问器属性：\n```\n[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[enumerable]]:表示能否通过for-in循环返回属性。\n[[get]]:在读取属性时调用的函数。默认值是undefined\n[[set]]:在写入属性时调用的函数。默认值是undefined\n像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable这些特性默认值为true。\n```\n访问器属性的使用方式即：设置一个属性的值会导致其他属性发生变化。\n **访问器属性的`get`、`set`特性不能直接定义,而是使用`Object.defineProperty()`来定义，属性的`get`、`set`特性和`writable`、`value`特性不能同时存在。**\n\n- 特性的访问方法：\n1. Object.defineProperty()\n例如：\n```\nvar book={};\nObject.defineProperty(book,”year”,{\n    configurable:true,\n    value:2004\n});\nObject.defineProperty(person,”_year”,{\n    configurable:true,\n    get:function(){\n        return this.year;\n    },\n    set:function(newValue){\n        if(newValue>2004){\n            this.year=newValue;\n        }\n    }\n});\n```\n**创建一个新属性，或修改一个属性的特性。创建一个新属性时，如果不指定，`configurable`、`enumerable`、`writable`默认值都为`false`。`configurable`一旦被设置为`false`，就不能再把它变回`true`了，此时，再调用`Object.defineProperty()`修改除`writable`之外的特性都会报错。**\n\n2. Object.defineProperties()\n可以一次性定义多个属性。\n```\nvar book={};\nObject.defineProperties(book,{\n    year:{\n        configurable:true,\n        value:2004\n    },\n    _year:{\n        configurable:true,\n        get:function(){\n            return this.year;\n        },\n        set:function(newValue){\n            if(newValue>2004){\n                this.year=newValue;\n            }\n        }\n    }\n});\n```\n3. Object.getOwnPropertyDescriptor()\n用来读取属性的特性。接受两个参数：属性所在的对象和要读取其特性的属性名,返回的时其特性的对象\n例如：\n```\nvar descriptor=Object.getOwnPropertyDescriptor(book,”year”);\n            alert(descriptor.value);//2004\n            alert(descriptor.configurable);//true\n```\n*读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，我做了3篇笔记。这是第一篇，后面还有两篇，分别是封装类和继承。*\n*以前一直认为真正理解了一个问题，你就能把它讲清楚，讲清楚了再把它写清楚就容易了，现在发现要写清楚真的太难了，要斟酌每句话都不是废话，没有歧义，尽量用少的字句等等。废话了好久也不知道写清楚了吗。*\n*如果哪里有问题欢迎指出。*","source":"_posts/读《javaScript高级程序设计－第6章》之理解对象.md","raw":"---\ntitle: 读《javaScript高级程序设计－第6章》之理解对象\ndate: 2017-10-18 19:10:13\ntags: js\n---\nECMA－262把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。所以，我们可以理解对象就是名值对的集合，名就是对象的每个属性的名字，而每个名字都映射到一个值。\n## 一、创建对象\n创建对象有两种方式：\n#### 方式一\n```\nvar person=new Object();\nperson.name=“Jone”;\nperson.age=20;\nperson.job=“Software Engineer”;\n\nperson.sayName=function(){\n    alert(this.name);\n};\n```\n#### 方式二\n```\nvar person={\n    name:”Jone”,\n    age:20,\n    job:“Software Engineer”,\n    \n    sayName:function(){\n        alert(this.name);\n    }\n};\n```\n这两种方式创建的对象都是一样的。也可以灵活的混合使用，但要记住`var person=new Object()`和\n```\nvar person={\n    name:”Jone”,\n    age:20,\n    job:“Software Engineer”,\n    \n    sayName:function(){\n        alert(this.name);\n    }\n}\n```\n都是在为person赋值，**不可重复赋值，如果重复使用就相当于前面的值放弃，使用后来重新赋的值。或者说都是在给person指向了一个新的地址，地址里存着新的对象。person确定是一个引用类型了，就可以在任意的地方用点来为它添加属性和访问属性，例如：`person.sex=“女”`。person用点访问时不会再为person更改指向地址，更改的是地址里存着的对象。**\n## 二、对象属性的特性\n对象的属性可以分为两种属性：数据属性，访问器属性。两种类型的属性有各自的特性。\n\n- 数据属性：\n```\n[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[enumerable]]:表示能否通过for-in循环返回属性。\n[[writable]]:表示能否修改属性的值。\n[[value]]:包含这个属性的数据值。读取属性值的时候，从这个位置读取；写入属性值的时候，把新值保存在这个位置。这个特性的默认值是undefined。\n像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable、writable这些特性默认值为true。\n```\n\n- 访问器属性：\n```\n[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。\n[[enumerable]]:表示能否通过for-in循环返回属性。\n[[get]]:在读取属性时调用的函数。默认值是undefined\n[[set]]:在写入属性时调用的函数。默认值是undefined\n像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable这些特性默认值为true。\n```\n访问器属性的使用方式即：设置一个属性的值会导致其他属性发生变化。\n **访问器属性的`get`、`set`特性不能直接定义,而是使用`Object.defineProperty()`来定义，属性的`get`、`set`特性和`writable`、`value`特性不能同时存在。**\n\n- 特性的访问方法：\n1. Object.defineProperty()\n例如：\n```\nvar book={};\nObject.defineProperty(book,”year”,{\n    configurable:true,\n    value:2004\n});\nObject.defineProperty(person,”_year”,{\n    configurable:true,\n    get:function(){\n        return this.year;\n    },\n    set:function(newValue){\n        if(newValue>2004){\n            this.year=newValue;\n        }\n    }\n});\n```\n**创建一个新属性，或修改一个属性的特性。创建一个新属性时，如果不指定，`configurable`、`enumerable`、`writable`默认值都为`false`。`configurable`一旦被设置为`false`，就不能再把它变回`true`了，此时，再调用`Object.defineProperty()`修改除`writable`之外的特性都会报错。**\n\n2. Object.defineProperties()\n可以一次性定义多个属性。\n```\nvar book={};\nObject.defineProperties(book,{\n    year:{\n        configurable:true,\n        value:2004\n    },\n    _year:{\n        configurable:true,\n        get:function(){\n            return this.year;\n        },\n        set:function(newValue){\n            if(newValue>2004){\n                this.year=newValue;\n            }\n        }\n    }\n});\n```\n3. Object.getOwnPropertyDescriptor()\n用来读取属性的特性。接受两个参数：属性所在的对象和要读取其特性的属性名,返回的时其特性的对象\n例如：\n```\nvar descriptor=Object.getOwnPropertyDescriptor(book,”year”);\n            alert(descriptor.value);//2004\n            alert(descriptor.configurable);//true\n```\n*读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，我做了3篇笔记。这是第一篇，后面还有两篇，分别是封装类和继承。*\n*以前一直认为真正理解了一个问题，你就能把它讲清楚，讲清楚了再把它写清楚就容易了，现在发现要写清楚真的太难了，要斟酌每句话都不是废话，没有歧义，尽量用少的字句等等。废话了好久也不知道写清楚了吗。*\n*如果哪里有问题欢迎指出。*","slug":"读《javaScript高级程序设计－第6章》之理解对象","published":1,"updated":"2017-10-20T07:42:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zl8v9c0005ssej8bzxrfm4","content":"<p>ECMA－262把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。所以，我们可以理解对象就是名值对的集合，名就是对象的每个属性的名字，而每个名字都映射到一个值。</p>\n<h2 id=\"一、创建对象\"><a href=\"#一、创建对象\" class=\"headerlink\" title=\"一、创建对象\"></a>一、创建对象</h2><p>创建对象有两种方式：</p>\n<h4 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=new Object();</div><div class=\"line\">person.name=“Jone”;</div><div class=\"line\">person.age=20;</div><div class=\"line\">person.job=“Software Engineer”;</div><div class=\"line\"></div><div class=\"line\">person.sayName=function()&#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">    name:”Jone”,</div><div class=\"line\">    age:20,</div><div class=\"line\">    job:“Software Engineer”,</div><div class=\"line\">    </div><div class=\"line\">    sayName:function()&#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这两种方式创建的对象都是一样的。也可以灵活的混合使用，但要记住<code>var person=new Object()</code>和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">    name:”Jone”,</div><div class=\"line\">    age:20,</div><div class=\"line\">    job:“Software Engineer”,</div><div class=\"line\">    </div><div class=\"line\">    sayName:function()&#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>都是在为person赋值，<strong>不可重复赋值，如果重复使用就相当于前面的值放弃，使用后来重新赋的值。或者说都是在给person指向了一个新的地址，地址里存着新的对象。person确定是一个引用类型了，就可以在任意的地方用点来为它添加属性和访问属性，例如：<code>person.sex=“女”</code>。person用点访问时不会再为person更改指向地址，更改的是地址里存着的对象。</strong></p>\n<h2 id=\"二、对象属性的特性\"><a href=\"#二、对象属性的特性\" class=\"headerlink\" title=\"二、对象属性的特性\"></a>二、对象属性的特性</h2><p>对象的属性可以分为两种属性：数据属性，访问器属性。两种类型的属性有各自的特性。</p>\n<ul>\n<li><p>数据属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</div><div class=\"line\">[[enumerable]]:表示能否通过for-in循环返回属性。</div><div class=\"line\">[[writable]]:表示能否修改属性的值。</div><div class=\"line\">[[value]]:包含这个属性的数据值。读取属性值的时候，从这个位置读取；写入属性值的时候，把新值保存在这个位置。这个特性的默认值是undefined。</div><div class=\"line\">像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable、writable这些特性默认值为true。</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问器属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</div><div class=\"line\">[[enumerable]]:表示能否通过for-in循环返回属性。</div><div class=\"line\">[[get]]:在读取属性时调用的函数。默认值是undefined</div><div class=\"line\">[[set]]:在写入属性时调用的函数。默认值是undefined</div><div class=\"line\">像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable这些特性默认值为true。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问器属性的使用方式即：设置一个属性的值会导致其他属性发生变化。<br> <strong>访问器属性的<code>get</code>、<code>set</code>特性不能直接定义,而是使用<code>Object.defineProperty()</code>来定义，属性的<code>get</code>、<code>set</code>特性和<code>writable</code>、<code>value</code>特性不能同时存在。</strong></p>\n<ul>\n<li>特性的访问方法：</li>\n</ul>\n<ol>\n<li>Object.defineProperty()<br>例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var book=&#123;&#125;;</div><div class=\"line\">Object.defineProperty(book,”year”,&#123;</div><div class=\"line\">    configurable:true,</div><div class=\"line\">    value:2004</div><div class=\"line\">&#125;);</div><div class=\"line\">Object.defineProperty(person,”_year”,&#123;</div><div class=\"line\">    configurable:true,</div><div class=\"line\">    get:function()&#123;</div><div class=\"line\">        return this.year;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set:function(newValue)&#123;</div><div class=\"line\">        if(newValue&gt;2004)&#123;</div><div class=\"line\">            this.year=newValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>创建一个新属性，或修改一个属性的特性。创建一个新属性时，如果不指定，<code>configurable</code>、<code>enumerable</code>、<code>writable</code>默认值都为<code>false</code>。<code>configurable</code>一旦被设置为<code>false</code>，就不能再把它变回<code>true</code>了，此时，再调用<code>Object.defineProperty()</code>修改除<code>writable</code>之外的特性都会报错。</strong></p>\n<ol>\n<li><p>Object.defineProperties()<br>可以一次性定义多个属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var book=&#123;&#125;;</div><div class=\"line\">Object.defineProperties(book,&#123;</div><div class=\"line\">    year:&#123;</div><div class=\"line\">        configurable:true,</div><div class=\"line\">        value:2004</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _year:&#123;</div><div class=\"line\">        configurable:true,</div><div class=\"line\">        get:function()&#123;</div><div class=\"line\">            return this.year;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set:function(newValue)&#123;</div><div class=\"line\">            if(newValue&gt;2004)&#123;</div><div class=\"line\">                this.year=newValue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertyDescriptor()<br>用来读取属性的特性。接受两个参数：属性所在的对象和要读取其特性的属性名,返回的时其特性的对象<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var descriptor=Object.getOwnPropertyDescriptor(book,”year”);</div><div class=\"line\">            alert(descriptor.value);//2004</div><div class=\"line\">            alert(descriptor.configurable);//true</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，我做了3篇笔记。这是第一篇，后面还有两篇，分别是封装类和继承。</em><br><em>以前一直认为真正理解了一个问题，你就能把它讲清楚，讲清楚了再把它写清楚就容易了，现在发现要写清楚真的太难了，要斟酌每句话都不是废话，没有歧义，尽量用少的字句等等。废话了好久也不知道写清楚了吗。</em><br><em>如果哪里有问题欢迎指出。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ECMA－262把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。所以，我们可以理解对象就是名值对的集合，名就是对象的每个属性的名字，而每个名字都映射到一个值。</p>\n<h2 id=\"一、创建对象\"><a href=\"#一、创建对象\" class=\"headerlink\" title=\"一、创建对象\"></a>一、创建对象</h2><p>创建对象有两种方式：</p>\n<h4 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=new Object();</div><div class=\"line\">person.name=“Jone”;</div><div class=\"line\">person.age=20;</div><div class=\"line\">person.job=“Software Engineer”;</div><div class=\"line\"></div><div class=\"line\">person.sayName=function()&#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">    name:”Jone”,</div><div class=\"line\">    age:20,</div><div class=\"line\">    job:“Software Engineer”,</div><div class=\"line\">    </div><div class=\"line\">    sayName:function()&#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这两种方式创建的对象都是一样的。也可以灵活的混合使用，但要记住<code>var person=new Object()</code>和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person=&#123;</div><div class=\"line\">    name:”Jone”,</div><div class=\"line\">    age:20,</div><div class=\"line\">    job:“Software Engineer”,</div><div class=\"line\">    </div><div class=\"line\">    sayName:function()&#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>都是在为person赋值，<strong>不可重复赋值，如果重复使用就相当于前面的值放弃，使用后来重新赋的值。或者说都是在给person指向了一个新的地址，地址里存着新的对象。person确定是一个引用类型了，就可以在任意的地方用点来为它添加属性和访问属性，例如：<code>person.sex=“女”</code>。person用点访问时不会再为person更改指向地址，更改的是地址里存着的对象。</strong></p>\n<h2 id=\"二、对象属性的特性\"><a href=\"#二、对象属性的特性\" class=\"headerlink\" title=\"二、对象属性的特性\"></a>二、对象属性的特性</h2><p>对象的属性可以分为两种属性：数据属性，访问器属性。两种类型的属性有各自的特性。</p>\n<ul>\n<li><p>数据属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</div><div class=\"line\">[[enumerable]]:表示能否通过for-in循环返回属性。</div><div class=\"line\">[[writable]]:表示能否修改属性的值。</div><div class=\"line\">[[value]]:包含这个属性的数据值。读取属性值的时候，从这个位置读取；写入属性值的时候，把新值保存在这个位置。这个特性的默认值是undefined。</div><div class=\"line\">像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable、writable这些特性默认值为true。</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问器属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[configurable]]:表示能否通过delete删除属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</div><div class=\"line\">[[enumerable]]:表示能否通过for-in循环返回属性。</div><div class=\"line\">[[get]]:在读取属性时调用的函数。默认值是undefined</div><div class=\"line\">[[set]]:在写入属性时调用的函数。默认值是undefined</div><div class=\"line\">像上面的例子那样直接在对象上定义的属性，它们的configurable、enumerable这些特性默认值为true。</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问器属性的使用方式即：设置一个属性的值会导致其他属性发生变化。<br> <strong>访问器属性的<code>get</code>、<code>set</code>特性不能直接定义,而是使用<code>Object.defineProperty()</code>来定义，属性的<code>get</code>、<code>set</code>特性和<code>writable</code>、<code>value</code>特性不能同时存在。</strong></p>\n<ul>\n<li>特性的访问方法：</li>\n</ul>\n<ol>\n<li>Object.defineProperty()<br>例如：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var book=&#123;&#125;;</div><div class=\"line\">Object.defineProperty(book,”year”,&#123;</div><div class=\"line\">    configurable:true,</div><div class=\"line\">    value:2004</div><div class=\"line\">&#125;);</div><div class=\"line\">Object.defineProperty(person,”_year”,&#123;</div><div class=\"line\">    configurable:true,</div><div class=\"line\">    get:function()&#123;</div><div class=\"line\">        return this.year;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set:function(newValue)&#123;</div><div class=\"line\">        if(newValue&gt;2004)&#123;</div><div class=\"line\">            this.year=newValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>创建一个新属性，或修改一个属性的特性。创建一个新属性时，如果不指定，<code>configurable</code>、<code>enumerable</code>、<code>writable</code>默认值都为<code>false</code>。<code>configurable</code>一旦被设置为<code>false</code>，就不能再把它变回<code>true</code>了，此时，再调用<code>Object.defineProperty()</code>修改除<code>writable</code>之外的特性都会报错。</strong></p>\n<ol>\n<li><p>Object.defineProperties()<br>可以一次性定义多个属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var book=&#123;&#125;;</div><div class=\"line\">Object.defineProperties(book,&#123;</div><div class=\"line\">    year:&#123;</div><div class=\"line\">        configurable:true,</div><div class=\"line\">        value:2004</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _year:&#123;</div><div class=\"line\">        configurable:true,</div><div class=\"line\">        get:function()&#123;</div><div class=\"line\">            return this.year;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set:function(newValue)&#123;</div><div class=\"line\">            if(newValue&gt;2004)&#123;</div><div class=\"line\">                this.year=newValue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Object.getOwnPropertyDescriptor()<br>用来读取属性的特性。接受两个参数：属性所在的对象和要读取其特性的属性名,返回的时其特性的对象<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var descriptor=Object.getOwnPropertyDescriptor(book,”year”);</div><div class=\"line\">            alert(descriptor.value);//2004</div><div class=\"line\">            alert(descriptor.configurable);//true</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>读《javaScript高级程序设计》这本书的第6章面向对象的程序设计，我做了3篇笔记。这是第一篇，后面还有两篇，分别是封装类和继承。</em><br><em>以前一直认为真正理解了一个问题，你就能把它讲清楚，讲清楚了再把它写清楚就容易了，现在发现要写清楚真的太难了，要斟酌每句话都不是废话，没有歧义，尽量用少的字句等等。废话了好久也不知道写清楚了吗。</em><br><em>如果哪里有问题欢迎指出。</em></p>\n"},{"title":"读《javaScript高级程序设计－第6章》之继承","date":"2017-10-20T07:23:57.000Z","_content":"*读这篇之前，最好是已读过我前面的关于对象的理解和封装类的笔记。*\n\n## 一、原型链\n原型链最简单的理解就是：原型对象指向另一个构造函数的实例。此时的原型对象包括一个指向另一个原型的指针，相应的，另一个原型中的constructor指向另一个构造函数。这种关系层层递进，就通过一个原型对象链接另一个构造函数的原型对象的方式实现了继承。\n下面用代码和图来详细分析一下原型链中的各种关系：\n```\nfunction SuperType(){\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty = false;\n}\n\n//inherit from SuperType\nSubType.prototype = new SuperType();\n\nSubType.prototype.getSubValue = function (){\n    return this.subproperty;\n};\n\nvar instance = new SubType();\nalert(instance.getSuperValue());   //true\nalert(instance.getSubValue());   //false\nalert(instance instanceof Object);      //true\nalert(instance instanceof SuperType);   //true\nalert(instance instanceof SubType);     //true\n\nalert(Object.prototype.isPrototypeOf(instance));    //true\nalert(SuperType.prototype.isPrototypeOf(instance)); //true\nalert(SubType.prototype.isPrototypeOf(instance));   //true\nconsole.log(new SuperType());\nconsole.log(instance);\n```\n下图是上面代码中打印出来的new SuperType()和instance的分析：\n![](../uploads/img8.png)\n从上面的分析我们看到的原型链：\nSubType的原型里有指向SuperType的原型的指针，SuperType的原型里有指向Object的原型的指针。\n也可以看红皮书里的图：\n![](../uploads/img9.png)\n- 访问属性的搜索过程：\n当以读取模式访问一个构造函数（SubType）的实例的属性时，首先会在实例中搜索实例属性。如果没找到该属性，则会继续搜索实例的原型；SubType继承了SuperType，那么实例的原型是另一个构造函数（SuperType）的实例，搜索实例的原型也就是在SuperType的实例中搜索该属性，没找到继续搜索SuperType的原型；SuperType继承了Object，以此递进，一层层搜索，直到找到或者搜到了原型链的末端停下来。\n- 判断原型和实例的关系\n\n(1)instanceof\n实例的原型链中出现过待检测的构造函数，就会返回true\n```\nalert(instance instanceof Object);      //true\nalert(instance instanceof SuperType);   //true\nalert(instance instanceof SubType);     //true\n```\n(2)isPrototypeOf()方法\n待检测对象出现在instance的原型链中，就会返回true\n```\nalert(Object.prototype.isPrototypeOf(instance));    //true\nalert(SuperType.prototype.isPrototypeOf(instance)); //true\nalert(SubType.prototype.isPrototypeOf(instance));   //true\n```\n- 注意事项\n\n(1)给原型添加方法的代码一定要放在替换原型的语句之后。也就是\n```\nSubType.prototype = new SuperType();这句代码一定要先写，在写下面的代码\n//new method\nSubType.prototype.getSubValue = function (){\n    return this.subproperty;\n};\n\n//override existing method\nSubType.prototype.getSuperValue = function (){\n    return false;\n};\n```\n(2)在通过原型链实现继承时，不能使用对象字面量为原型添加属性，因为这会重写原型链（具体请看理解对象篇里的一、创建对象）。\n如下：\n```\nfunction SuperType(){\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty = false;\n}\n\n//继承了 SuperType\nSubType.prototype = new SuperType();\n\n//使用字面量添加新方法，会导致上一行代码无效\nSubType.prototype = {\n    getSubValue : function (){\n        return this.subproperty;\n    },\n\n    someOtherMethod : function (){\n        return false;\n    }\n};\n\nvar instance = new SubType();\nalert(instance.getSuperValue());   //error!\n```\n其实这两个注意事项，只要你明白了（理解对象篇里的一、创建对象）后，根本不需要解释。\n- 原型链的问题\n\n(1)没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。\n\n(2)在另一篇笔记封装类原型模式中提到过，原型中的属性是被共享的，但如果属性的值时引用类型，会有问题的。而在继承时，原型实际上会是另一个类型的实例（这个实例包含引用类型值的实例属性），那么原先的这个实例的实例属性就会成为现在的原型属性了，就会出现同样的问题了。共享了引用类型值的属性。\n## 二、借用构造函数\n直接上代码吧：\n```\nfunction SuperType(name){\n    this.name = name;\n}\n\nfunction SubType(){ \n    //继承了 SuperType ，同时还传递了参数\n    SuperType.call(this, \"Nicholas\");\n   \n    //实例属性\n    this.age = 29;\n}\n\nvar instance = new SubType();\nalert(instance.name);    //\"Nicholas\";\nalert(instance.age);     //29\n```\n如上写法就解决了原型链里的两个问题了，为什么呢？请看下面的讲解：\n**SuperType，如果你用new调用它是构造函数，但你不用new，它就是个普通函数。SuperType.call(this, \"Nicholas\");不但传递了参数，还绑定了子类的作用域，就相当于SuperType方法在帮助定义子类的实例属性。也就是说，即使SuperType的中定义的属性里有引用类型值，也不会成为子类SubType的原型属性，仍然时实例属性。我们要时刻记住实例属性是每个实例所私有的，而原型属性是会被所有实例所共享的。**\n\n当然这也写也不完美，问题显而易见，和构造函数模式同样的问题。\n## 三、组合继承\n组合继承，就像是封装类里的把构造函数模式和原型模式组合使用是一样的。这里是把原型链和借用构造函数相组合。\n简单来说就是：**使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承（父类的实例属性变成子类的实例属性）。**\n还是上代码吧：\n```\nfunction SuperType(name){\n    this.name = name;    this.colors = [\"red\", \"blue\", \"green\"];}\n\nSuperType.prototype.sayName = function(){\n    alert(this.name);};function SubType(name, age){ \n    SuperType.call(this, name);       this.age = age;}\n\nSubType.prototype = new SuperType();SubType.prototype.sayAge = function(){\n    alert(this.age);};var instance1 = new SubType(\"Nicholas\", 29);instance1.colors.push(\"black\");alert(instance1.colors);  //\"red,blue,green,black\"instance1.sayName();      //\"Nicholas\";instance1.sayAge();       //29\nvar instance2 = new SubType(\"Greg\", 27);alert(instance2.colors);  //\"red,blue,green\"instance2.sayName();      //\"Greg\";instance2.sayAge();       //27\n```\n解释:\n下图是instance1的打印\n![](../uploads/img10.png)\n**我们可以看到instance1具有了父类SuperType的实例属性name 、colors，但是子类的原型是父类的实例，所以原型中仍存在父类的实例属性，但是子类已经有了同样的实例属性name和colors，所以子类原型中的这两个属性就被屏蔽了。从子类访问它的name和colors属性只会访问到它的实例属性。**\n\n组合继承是javaScript中最常用的继承模式。而且instance和isPrototypeOf()也能够用于识别给予组合继承创建的对象类型。\n## 四、原型式继承\n感兴趣可以了解一下。\n原型链中，我们是让原型对象指向一个构造函数的实例，这个实例本质上就是一个对象。原型式继承就是让原型对象指向一个已有的对象，不必创建自定义类型。如下：\n```\nfunction object(o){\n    function F(){}\n    F.prototype = o;\n    return new F();\n}\nvar person = {\n    name: \"Nicholas\",\n    friends: [\"Shelby\", \"Court\", \"Van\"]\n};\n\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\n\nvar yetAnotherPerson = object(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\nconsole.log(person.friends);   //\"Shelby,Court,Van,Rob,Barbie”\n```\n大家还记得原型模式吗。我的理解：这就是一个原型模式，区别是object这个方法就相当于一个工厂，你传给它一个对象，它就给你一个原型是这个对象的实例。这个实例就会相应的继承到了你传给它的那个对象的属性。\n当然你也可以不用自己写上面的object这个方法，因为ES5提供了，而且更规范。ES5中新增了`Object.create()`方法规范化了原型式继承。这个方法接受两个参数：一个是用做新对象原型的对象和（可选）一个为新对象定义额外属性的对象*(或者说是定义新对象的实例属性的对象，这个参数和defineProperties()方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的)*。\n上代码：\n```\nvar person = {\n    name: \"Nicholas\",\n    friends: [\"Shelby\", \"Court\", \"Van\"]\n};\n                  \nvar anotherPerson = Object.create(person, {\n    name: {\n        value: \"Greg\"\n    }\n});\nconsole.log(anotherPerson);\n```\n打印结果图：\n![](../uploads/img11.png)\n从上图可以看到第二个参数定义的name属性是新对象的实例属性，它会屏蔽掉它的原型属性里的同名属性name。简单来说，Object.create就是用原型模式创建新对象的一个工厂，第一个参数定义了原型属性，第二个参数定义了实例属性。\n## 五、寄生式继承\n这一小节，感兴趣了解一下。\n\n## 六、寄生组合式继承\n**前面说过，组合继承是js里最常用的继承模式，但是它并不完美。问题是：调用了两次超类SuperType的构造函数，子类创建了一部分多余的属性（这部分属性是超类的实例属性，在子类的实例属性里存在并有用，但在子类的原型中也存在且没用）。寄生组合式继承就是解决这个问题的。**\n上代码：\n```\nfunction object(o){\n    function F(){}\n    F.prototype = o;    \n    return new F();\n}\n\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype);   //create object    \n    prototype.constructor = subType;               //augment object    \n    subType.prototype = prototype;                 //assign object\n}\n                       \nfunction SuperType(name){\n    this.name = name;    \n    this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nSuperType.prototype.sayName = function(){\n    alert(this.name);\n};\nfunction SubType(name, age){ \n    SuperType.call(this, name);\n    this.age = age;\n}\n\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function(){\n    alert(this.age);\n};\n\nvar instance1 = new SubType(\"Nicholas\", 29);\ninstance1.colors.push(\"black\");\nalert(instance1.colors);  //\"red,blue,green,black\"\ninstance1.sayName();      //\"Nicholas\"\ninstance1.sayAge();       //29var \ninstance2 = new SubType(\"Greg\", 27);\nalert(instance2.colors);  //\"red,blue,green\"\ninstance2.sayName();      //\"Greg\"\ninstance2.sayAge();       //27\nconsole.log(instance1);\nconsole.log(SuperType.prototype);\n```\n代码运行打印结果图：\n![](../uploads/img12.png)\n从图中可以看到instance1（子类实例）的原型里已经没有了超类的实例属性name、colors。而且代码中只运行了一次超类构造函数。怎么做到的呢？请看下面的解释：\n我们先看这段代码：\n```\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype);   //create object\n    prototype.constructor = subType;               //augment object\n    subType.prototype = prototype;                 //assign object\n}\n```\nsubType的原型还是指向了一个对象，这个对象是什么呢？object这个方法返回的对象，这个对象是一个构造函数是空的，原型指向超类原型的实例。什么意思呢？就是说subType的原型还是一个构造函数的实例，但不是超类SuperType的实例，而是一个新建的临时的空的构造函数F的实例。看代码：\n```\nfunction object(o){\n    function F(){}\n    F.prototype = o;\n    return new F();\n}\n```\n这个临时的构造函数F具有和超类SuperType一样的原型。那么这个时候的子类的原型中就只有F的实例属性和原型，而F的实例属性是空的，就只有F的原型，F的原型就是超类SuperType的原型。这样子类的实例属性还是继承了超类的实例属性，而子类的原型属性只继承了超类的原型。完美，就这样。\n\n啰嗦一句我对面向对象程序设计的理解，面向对象程序设计就是一直在说如何使用对象。其实，只要结果符合你的预期，对象真的是想怎么使用就怎么使用，不一定非得像书中说的什么各种模式的。当然书中的这么多种模式方法的介绍可以了解一下*（但是构造函数模式、原型模式。以及继承里的原型链、借用构造函数。还包括它们的组合使用还是需要认真研读，深刻理解的。再顺便说一句，继承里的原型链、借用构造函数可以看作是原型模式和构造函数模式的进化）*，可以加深自己对对象的理解，有助于你花式使用对象的方法。哈哈哈","source":"_posts/读《javaScript高级程序设计－第6章》之继承.md","raw":"---\ntitle: 读《javaScript高级程序设计－第6章》之继承\ndate: 2017-10-20 15:23:57\ntags: js\n---\n*读这篇之前，最好是已读过我前面的关于对象的理解和封装类的笔记。*\n\n## 一、原型链\n原型链最简单的理解就是：原型对象指向另一个构造函数的实例。此时的原型对象包括一个指向另一个原型的指针，相应的，另一个原型中的constructor指向另一个构造函数。这种关系层层递进，就通过一个原型对象链接另一个构造函数的原型对象的方式实现了继承。\n下面用代码和图来详细分析一下原型链中的各种关系：\n```\nfunction SuperType(){\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty = false;\n}\n\n//inherit from SuperType\nSubType.prototype = new SuperType();\n\nSubType.prototype.getSubValue = function (){\n    return this.subproperty;\n};\n\nvar instance = new SubType();\nalert(instance.getSuperValue());   //true\nalert(instance.getSubValue());   //false\nalert(instance instanceof Object);      //true\nalert(instance instanceof SuperType);   //true\nalert(instance instanceof SubType);     //true\n\nalert(Object.prototype.isPrototypeOf(instance));    //true\nalert(SuperType.prototype.isPrototypeOf(instance)); //true\nalert(SubType.prototype.isPrototypeOf(instance));   //true\nconsole.log(new SuperType());\nconsole.log(instance);\n```\n下图是上面代码中打印出来的new SuperType()和instance的分析：\n![](../uploads/img8.png)\n从上面的分析我们看到的原型链：\nSubType的原型里有指向SuperType的原型的指针，SuperType的原型里有指向Object的原型的指针。\n也可以看红皮书里的图：\n![](../uploads/img9.png)\n- 访问属性的搜索过程：\n当以读取模式访问一个构造函数（SubType）的实例的属性时，首先会在实例中搜索实例属性。如果没找到该属性，则会继续搜索实例的原型；SubType继承了SuperType，那么实例的原型是另一个构造函数（SuperType）的实例，搜索实例的原型也就是在SuperType的实例中搜索该属性，没找到继续搜索SuperType的原型；SuperType继承了Object，以此递进，一层层搜索，直到找到或者搜到了原型链的末端停下来。\n- 判断原型和实例的关系\n\n(1)instanceof\n实例的原型链中出现过待检测的构造函数，就会返回true\n```\nalert(instance instanceof Object);      //true\nalert(instance instanceof SuperType);   //true\nalert(instance instanceof SubType);     //true\n```\n(2)isPrototypeOf()方法\n待检测对象出现在instance的原型链中，就会返回true\n```\nalert(Object.prototype.isPrototypeOf(instance));    //true\nalert(SuperType.prototype.isPrototypeOf(instance)); //true\nalert(SubType.prototype.isPrototypeOf(instance));   //true\n```\n- 注意事项\n\n(1)给原型添加方法的代码一定要放在替换原型的语句之后。也就是\n```\nSubType.prototype = new SuperType();这句代码一定要先写，在写下面的代码\n//new method\nSubType.prototype.getSubValue = function (){\n    return this.subproperty;\n};\n\n//override existing method\nSubType.prototype.getSuperValue = function (){\n    return false;\n};\n```\n(2)在通过原型链实现继承时，不能使用对象字面量为原型添加属性，因为这会重写原型链（具体请看理解对象篇里的一、创建对象）。\n如下：\n```\nfunction SuperType(){\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function(){\n    return this.property;\n};\n\nfunction SubType(){\n    this.subproperty = false;\n}\n\n//继承了 SuperType\nSubType.prototype = new SuperType();\n\n//使用字面量添加新方法，会导致上一行代码无效\nSubType.prototype = {\n    getSubValue : function (){\n        return this.subproperty;\n    },\n\n    someOtherMethod : function (){\n        return false;\n    }\n};\n\nvar instance = new SubType();\nalert(instance.getSuperValue());   //error!\n```\n其实这两个注意事项，只要你明白了（理解对象篇里的一、创建对象）后，根本不需要解释。\n- 原型链的问题\n\n(1)没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。\n\n(2)在另一篇笔记封装类原型模式中提到过，原型中的属性是被共享的，但如果属性的值时引用类型，会有问题的。而在继承时，原型实际上会是另一个类型的实例（这个实例包含引用类型值的实例属性），那么原先的这个实例的实例属性就会成为现在的原型属性了，就会出现同样的问题了。共享了引用类型值的属性。\n## 二、借用构造函数\n直接上代码吧：\n```\nfunction SuperType(name){\n    this.name = name;\n}\n\nfunction SubType(){ \n    //继承了 SuperType ，同时还传递了参数\n    SuperType.call(this, \"Nicholas\");\n   \n    //实例属性\n    this.age = 29;\n}\n\nvar instance = new SubType();\nalert(instance.name);    //\"Nicholas\";\nalert(instance.age);     //29\n```\n如上写法就解决了原型链里的两个问题了，为什么呢？请看下面的讲解：\n**SuperType，如果你用new调用它是构造函数，但你不用new，它就是个普通函数。SuperType.call(this, \"Nicholas\");不但传递了参数，还绑定了子类的作用域，就相当于SuperType方法在帮助定义子类的实例属性。也就是说，即使SuperType的中定义的属性里有引用类型值，也不会成为子类SubType的原型属性，仍然时实例属性。我们要时刻记住实例属性是每个实例所私有的，而原型属性是会被所有实例所共享的。**\n\n当然这也写也不完美，问题显而易见，和构造函数模式同样的问题。\n## 三、组合继承\n组合继承，就像是封装类里的把构造函数模式和原型模式组合使用是一样的。这里是把原型链和借用构造函数相组合。\n简单来说就是：**使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承（父类的实例属性变成子类的实例属性）。**\n还是上代码吧：\n```\nfunction SuperType(name){\n    this.name = name;    this.colors = [\"red\", \"blue\", \"green\"];}\n\nSuperType.prototype.sayName = function(){\n    alert(this.name);};function SubType(name, age){ \n    SuperType.call(this, name);       this.age = age;}\n\nSubType.prototype = new SuperType();SubType.prototype.sayAge = function(){\n    alert(this.age);};var instance1 = new SubType(\"Nicholas\", 29);instance1.colors.push(\"black\");alert(instance1.colors);  //\"red,blue,green,black\"instance1.sayName();      //\"Nicholas\";instance1.sayAge();       //29\nvar instance2 = new SubType(\"Greg\", 27);alert(instance2.colors);  //\"red,blue,green\"instance2.sayName();      //\"Greg\";instance2.sayAge();       //27\n```\n解释:\n下图是instance1的打印\n![](../uploads/img10.png)\n**我们可以看到instance1具有了父类SuperType的实例属性name 、colors，但是子类的原型是父类的实例，所以原型中仍存在父类的实例属性，但是子类已经有了同样的实例属性name和colors，所以子类原型中的这两个属性就被屏蔽了。从子类访问它的name和colors属性只会访问到它的实例属性。**\n\n组合继承是javaScript中最常用的继承模式。而且instance和isPrototypeOf()也能够用于识别给予组合继承创建的对象类型。\n## 四、原型式继承\n感兴趣可以了解一下。\n原型链中，我们是让原型对象指向一个构造函数的实例，这个实例本质上就是一个对象。原型式继承就是让原型对象指向一个已有的对象，不必创建自定义类型。如下：\n```\nfunction object(o){\n    function F(){}\n    F.prototype = o;\n    return new F();\n}\nvar person = {\n    name: \"Nicholas\",\n    friends: [\"Shelby\", \"Court\", \"Van\"]\n};\n\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\n\nvar yetAnotherPerson = object(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\nconsole.log(person.friends);   //\"Shelby,Court,Van,Rob,Barbie”\n```\n大家还记得原型模式吗。我的理解：这就是一个原型模式，区别是object这个方法就相当于一个工厂，你传给它一个对象，它就给你一个原型是这个对象的实例。这个实例就会相应的继承到了你传给它的那个对象的属性。\n当然你也可以不用自己写上面的object这个方法，因为ES5提供了，而且更规范。ES5中新增了`Object.create()`方法规范化了原型式继承。这个方法接受两个参数：一个是用做新对象原型的对象和（可选）一个为新对象定义额外属性的对象*(或者说是定义新对象的实例属性的对象，这个参数和defineProperties()方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的)*。\n上代码：\n```\nvar person = {\n    name: \"Nicholas\",\n    friends: [\"Shelby\", \"Court\", \"Van\"]\n};\n                  \nvar anotherPerson = Object.create(person, {\n    name: {\n        value: \"Greg\"\n    }\n});\nconsole.log(anotherPerson);\n```\n打印结果图：\n![](../uploads/img11.png)\n从上图可以看到第二个参数定义的name属性是新对象的实例属性，它会屏蔽掉它的原型属性里的同名属性name。简单来说，Object.create就是用原型模式创建新对象的一个工厂，第一个参数定义了原型属性，第二个参数定义了实例属性。\n## 五、寄生式继承\n这一小节，感兴趣了解一下。\n\n## 六、寄生组合式继承\n**前面说过，组合继承是js里最常用的继承模式，但是它并不完美。问题是：调用了两次超类SuperType的构造函数，子类创建了一部分多余的属性（这部分属性是超类的实例属性，在子类的实例属性里存在并有用，但在子类的原型中也存在且没用）。寄生组合式继承就是解决这个问题的。**\n上代码：\n```\nfunction object(o){\n    function F(){}\n    F.prototype = o;    \n    return new F();\n}\n\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype);   //create object    \n    prototype.constructor = subType;               //augment object    \n    subType.prototype = prototype;                 //assign object\n}\n                       \nfunction SuperType(name){\n    this.name = name;    \n    this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nSuperType.prototype.sayName = function(){\n    alert(this.name);\n};\nfunction SubType(name, age){ \n    SuperType.call(this, name);\n    this.age = age;\n}\n\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function(){\n    alert(this.age);\n};\n\nvar instance1 = new SubType(\"Nicholas\", 29);\ninstance1.colors.push(\"black\");\nalert(instance1.colors);  //\"red,blue,green,black\"\ninstance1.sayName();      //\"Nicholas\"\ninstance1.sayAge();       //29var \ninstance2 = new SubType(\"Greg\", 27);\nalert(instance2.colors);  //\"red,blue,green\"\ninstance2.sayName();      //\"Greg\"\ninstance2.sayAge();       //27\nconsole.log(instance1);\nconsole.log(SuperType.prototype);\n```\n代码运行打印结果图：\n![](../uploads/img12.png)\n从图中可以看到instance1（子类实例）的原型里已经没有了超类的实例属性name、colors。而且代码中只运行了一次超类构造函数。怎么做到的呢？请看下面的解释：\n我们先看这段代码：\n```\nfunction inheritPrototype(subType, superType){\n    var prototype = object(superType.prototype);   //create object\n    prototype.constructor = subType;               //augment object\n    subType.prototype = prototype;                 //assign object\n}\n```\nsubType的原型还是指向了一个对象，这个对象是什么呢？object这个方法返回的对象，这个对象是一个构造函数是空的，原型指向超类原型的实例。什么意思呢？就是说subType的原型还是一个构造函数的实例，但不是超类SuperType的实例，而是一个新建的临时的空的构造函数F的实例。看代码：\n```\nfunction object(o){\n    function F(){}\n    F.prototype = o;\n    return new F();\n}\n```\n这个临时的构造函数F具有和超类SuperType一样的原型。那么这个时候的子类的原型中就只有F的实例属性和原型，而F的实例属性是空的，就只有F的原型，F的原型就是超类SuperType的原型。这样子类的实例属性还是继承了超类的实例属性，而子类的原型属性只继承了超类的原型。完美，就这样。\n\n啰嗦一句我对面向对象程序设计的理解，面向对象程序设计就是一直在说如何使用对象。其实，只要结果符合你的预期，对象真的是想怎么使用就怎么使用，不一定非得像书中说的什么各种模式的。当然书中的这么多种模式方法的介绍可以了解一下*（但是构造函数模式、原型模式。以及继承里的原型链、借用构造函数。还包括它们的组合使用还是需要认真研读，深刻理解的。再顺便说一句，继承里的原型链、借用构造函数可以看作是原型模式和构造函数模式的进化）*，可以加深自己对对象的理解，有助于你花式使用对象的方法。哈哈哈","slug":"读《javaScript高级程序设计－第6章》之继承","published":1,"updated":"2017-10-20T07:38:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zl8v9f0008ssejyxb8h3cq","content":"<p><em>读这篇之前，最好是已读过我前面的关于对象的理解和封装类的笔记。</em></p>\n<h2 id=\"一、原型链\"><a href=\"#一、原型链\" class=\"headerlink\" title=\"一、原型链\"></a>一、原型链</h2><p>原型链最简单的理解就是：原型对象指向另一个构造函数的实例。此时的原型对象包括一个指向另一个原型的指针，相应的，另一个原型中的constructor指向另一个构造函数。这种关系层层递进，就通过一个原型对象链接另一个构造函数的原型对象的方式实现了继承。<br>下面用代码和图来详细分析一下原型链中的各种关系：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType()&#123;</div><div class=\"line\">    this.property = true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</div><div class=\"line\">    return this.property;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType()&#123;</div><div class=\"line\">    this.subproperty = false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//inherit from SuperType</div><div class=\"line\">SubType.prototype = new SuperType();</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.getSubValue = function ()&#123;</div><div class=\"line\">    return this.subproperty;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.getSuperValue());   //true</div><div class=\"line\">alert(instance.getSubValue());   //false</div><div class=\"line\">alert(instance instanceof Object);      //true</div><div class=\"line\">alert(instance instanceof SuperType);   //true</div><div class=\"line\">alert(instance instanceof SubType);     //true</div><div class=\"line\"></div><div class=\"line\">alert(Object.prototype.isPrototypeOf(instance));    //true</div><div class=\"line\">alert(SuperType.prototype.isPrototypeOf(instance)); //true</div><div class=\"line\">alert(SubType.prototype.isPrototypeOf(instance));   //true</div><div class=\"line\">console.log(new SuperType());</div><div class=\"line\">console.log(instance);</div></pre></td></tr></table></figure></p>\n<p>下图是上面代码中打印出来的new SuperType()和instance的分析：<br><img src=\"../uploads/img8.png\" alt=\"\"><br>从上面的分析我们看到的原型链：<br>SubType的原型里有指向SuperType的原型的指针，SuperType的原型里有指向Object的原型的指针。<br>也可以看红皮书里的图：<br><img src=\"../uploads/img9.png\" alt=\"\"></p>\n<ul>\n<li>访问属性的搜索过程：<br>当以读取模式访问一个构造函数（SubType）的实例的属性时，首先会在实例中搜索实例属性。如果没找到该属性，则会继续搜索实例的原型；SubType继承了SuperType，那么实例的原型是另一个构造函数（SuperType）的实例，搜索实例的原型也就是在SuperType的实例中搜索该属性，没找到继续搜索SuperType的原型；SuperType继承了Object，以此递进，一层层搜索，直到找到或者搜到了原型链的末端停下来。</li>\n<li>判断原型和实例的关系</li>\n</ul>\n<p>(1)instanceof<br>实例的原型链中出现过待检测的构造函数，就会返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(instance instanceof Object);      //true</div><div class=\"line\">alert(instance instanceof SuperType);   //true</div><div class=\"line\">alert(instance instanceof SubType);     //true</div></pre></td></tr></table></figure></p>\n<p>(2)isPrototypeOf()方法<br>待检测对象出现在instance的原型链中，就会返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(Object.prototype.isPrototypeOf(instance));    //true</div><div class=\"line\">alert(SuperType.prototype.isPrototypeOf(instance)); //true</div><div class=\"line\">alert(SubType.prototype.isPrototypeOf(instance));   //true</div></pre></td></tr></table></figure></p>\n<ul>\n<li>注意事项</li>\n</ul>\n<p>(1)给原型添加方法的代码一定要放在替换原型的语句之后。也就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SubType.prototype = new SuperType();这句代码一定要先写，在写下面的代码</div><div class=\"line\">//new method</div><div class=\"line\">SubType.prototype.getSubValue = function ()&#123;</div><div class=\"line\">    return this.subproperty;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//override existing method</div><div class=\"line\">SubType.prototype.getSuperValue = function ()&#123;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>(2)在通过原型链实现继承时，不能使用对象字面量为原型添加属性，因为这会重写原型链（具体请看理解对象篇里的一、创建对象）。<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType()&#123;</div><div class=\"line\">    this.property = true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</div><div class=\"line\">    return this.property;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType()&#123;</div><div class=\"line\">    this.subproperty = false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//继承了 SuperType</div><div class=\"line\">SubType.prototype = new SuperType();</div><div class=\"line\"></div><div class=\"line\">//使用字面量添加新方法，会导致上一行代码无效</div><div class=\"line\">SubType.prototype = &#123;</div><div class=\"line\">    getSubValue : function ()&#123;</div><div class=\"line\">        return this.subproperty;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    someOtherMethod : function ()&#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.getSuperValue());   //error!</div></pre></td></tr></table></figure></p>\n<p>其实这两个注意事项，只要你明白了（理解对象篇里的一、创建对象）后，根本不需要解释。</p>\n<ul>\n<li>原型链的问题</li>\n</ul>\n<p>(1)没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。</p>\n<p>(2)在另一篇笔记封装类原型模式中提到过，原型中的属性是被共享的，但如果属性的值时引用类型，会有问题的。而在继承时，原型实际上会是另一个类型的实例（这个实例包含引用类型值的实例属性），那么原先的这个实例的实例属性就会成为现在的原型属性了，就会出现同样的问题了。共享了引用类型值的属性。</p>\n<h2 id=\"二、借用构造函数\"><a href=\"#二、借用构造函数\" class=\"headerlink\" title=\"二、借用构造函数\"></a>二、借用构造函数</h2><p>直接上代码吧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType(name)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SubType()&#123; </div><div class=\"line\">    //继承了 SuperType ，同时还传递了参数</div><div class=\"line\">    SuperType.call(this, &quot;Nicholas&quot;);</div><div class=\"line\">   </div><div class=\"line\">    //实例属性</div><div class=\"line\">    this.age = 29;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.name);    //&quot;Nicholas&quot;;</div><div class=\"line\">alert(instance.age);     //29</div></pre></td></tr></table></figure></p>\n<p>如上写法就解决了原型链里的两个问题了，为什么呢？请看下面的讲解：<br><strong>SuperType，如果你用new调用它是构造函数，但你不用new，它就是个普通函数。SuperType.call(this, “Nicholas”);不但传递了参数，还绑定了子类的作用域，就相当于SuperType方法在帮助定义子类的实例属性。也就是说，即使SuperType的中定义的属性里有引用类型值，也不会成为子类SubType的原型属性，仍然时实例属性。我们要时刻记住实例属性是每个实例所私有的，而原型属性是会被所有实例所共享的。</strong></p>\n<p>当然这也写也不完美，问题显而易见，和构造函数模式同样的问题。</p>\n<h2 id=\"三、组合继承\"><a href=\"#三、组合继承\" class=\"headerlink\" title=\"三、组合继承\"></a>三、组合继承</h2><p>组合继承，就像是封装类里的把构造函数模式和原型模式组合使用是一样的。这里是把原型链和借用构造函数相组合。<br>简单来说就是：<strong>使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承（父类的实例属性变成子类的实例属性）。</strong><br>还是上代码吧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType(name)&#123;</div><div class=\"line\">    this.name = name;    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function()&#123;</div><div class=\"line\">    alert(this.name);&#125;;function SubType(name, age)&#123; </div><div class=\"line\">    SuperType.call(this, name);       this.age = age;&#125;</div><div class=\"line\"></div><div class=\"line\">SubType.prototype = new SuperType();SubType.prototype.sayAge = function()&#123;</div><div class=\"line\">    alert(this.age);&#125;;var instance1 = new SubType(&quot;Nicholas&quot;, 29);instance1.colors.push(&quot;black&quot;);alert(instance1.colors);  //&quot;red,blue,green,black&quot;instance1.sayName();      //&quot;Nicholas&quot;;instance1.sayAge();       //29</div><div class=\"line\">var instance2 = new SubType(&quot;Greg&quot;, 27);alert(instance2.colors);  //&quot;red,blue,green&quot;instance2.sayName();      //&quot;Greg&quot;;instance2.sayAge();       //27</div></pre></td></tr></table></figure></p>\n<p>解释:<br>下图是instance1的打印<br><img src=\"../uploads/img10.png\" alt=\"\"><br><strong>我们可以看到instance1具有了父类SuperType的实例属性name 、colors，但是子类的原型是父类的实例，所以原型中仍存在父类的实例属性，但是子类已经有了同样的实例属性name和colors，所以子类原型中的这两个属性就被屏蔽了。从子类访问它的name和colors属性只会访问到它的实例属性。</strong></p>\n<p>组合继承是javaScript中最常用的继承模式。而且instance和isPrototypeOf()也能够用于识别给予组合继承创建的对象类型。</p>\n<h2 id=\"四、原型式继承\"><a href=\"#四、原型式继承\" class=\"headerlink\" title=\"四、原型式继承\"></a>四、原型式继承</h2><p>感兴趣可以了解一下。<br>原型链中，我们是让原型对象指向一个构造函数的实例，这个实例本质上就是一个对象。原型式继承就是让原型对象指向一个已有的对象，不必创建自定义类型。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o)&#123;</div><div class=\"line\">    function F()&#123;&#125;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    return new F();</div><div class=\"line\">&#125;</div><div class=\"line\">var person = &#123;</div><div class=\"line\">    name: &quot;Nicholas&quot;,</div><div class=\"line\">    friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var anotherPerson = object(person);</div><div class=\"line\">anotherPerson.name = &quot;Greg&quot;;</div><div class=\"line\">anotherPerson.friends.push(&quot;Rob&quot;);</div><div class=\"line\"></div><div class=\"line\">var yetAnotherPerson = object(person);</div><div class=\"line\">yetAnotherPerson.name = &quot;Linda&quot;;</div><div class=\"line\">yetAnotherPerson.friends.push(&quot;Barbie&quot;);</div><div class=\"line\">console.log(person.friends);   //&quot;Shelby,Court,Van,Rob,Barbie”</div></pre></td></tr></table></figure></p>\n<p>大家还记得原型模式吗。我的理解：这就是一个原型模式，区别是object这个方法就相当于一个工厂，你传给它一个对象，它就给你一个原型是这个对象的实例。这个实例就会相应的继承到了你传给它的那个对象的属性。<br>当然你也可以不用自己写上面的object这个方法，因为ES5提供了，而且更规范。ES5中新增了<code>Object.create()</code>方法规范化了原型式继承。这个方法接受两个参数：一个是用做新对象原型的对象和（可选）一个为新对象定义额外属性的对象<em>(或者说是定义新对象的实例属性的对象，这个参数和defineProperties()方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的)</em>。<br>上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = &#123;</div><div class=\"line\">    name: &quot;Nicholas&quot;,</div><div class=\"line\">    friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\">&#125;;</div><div class=\"line\">                  </div><div class=\"line\">var anotherPerson = Object.create(person, &#123;</div><div class=\"line\">    name: &#123;</div><div class=\"line\">        value: &quot;Greg&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(anotherPerson);</div></pre></td></tr></table></figure></p>\n<p>打印结果图：<br><img src=\"../uploads/img11.png\" alt=\"\"><br>从上图可以看到第二个参数定义的name属性是新对象的实例属性，它会屏蔽掉它的原型属性里的同名属性name。简单来说，Object.create就是用原型模式创建新对象的一个工厂，第一个参数定义了原型属性，第二个参数定义了实例属性。</p>\n<h2 id=\"五、寄生式继承\"><a href=\"#五、寄生式继承\" class=\"headerlink\" title=\"五、寄生式继承\"></a>五、寄生式继承</h2><p>这一小节，感兴趣了解一下。</p>\n<h2 id=\"六、寄生组合式继承\"><a href=\"#六、寄生组合式继承\" class=\"headerlink\" title=\"六、寄生组合式继承\"></a>六、寄生组合式继承</h2><p><strong>前面说过，组合继承是js里最常用的继承模式，但是它并不完美。问题是：调用了两次超类SuperType的构造函数，子类创建了一部分多余的属性（这部分属性是超类的实例属性，在子类的实例属性里存在并有用，但在子类的原型中也存在且没用）。寄生组合式继承就是解决这个问题的。</strong><br>上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o)&#123;</div><div class=\"line\">    function F()&#123;&#125;</div><div class=\"line\">    F.prototype = o;    </div><div class=\"line\">    return new F();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function inheritPrototype(subType, superType)&#123;</div><div class=\"line\">    var prototype = object(superType.prototype);   //create object    </div><div class=\"line\">    prototype.constructor = subType;               //augment object    </div><div class=\"line\">    subType.prototype = prototype;                 //assign object</div><div class=\"line\">&#125;</div><div class=\"line\">                       </div><div class=\"line\">function SuperType(name)&#123;</div><div class=\"line\">    this.name = name;    </div><div class=\"line\">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function()&#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">function SubType(name, age)&#123; </div><div class=\"line\">    SuperType.call(this, name);</div><div class=\"line\">    this.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(SubType, SuperType);</div><div class=\"line\">SubType.prototype.sayAge = function()&#123;</div><div class=\"line\">    alert(this.age);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance1 = new SubType(&quot;Nicholas&quot;, 29);</div><div class=\"line\">instance1.colors.push(&quot;black&quot;);</div><div class=\"line\">alert(instance1.colors);  //&quot;red,blue,green,black&quot;</div><div class=\"line\">instance1.sayName();      //&quot;Nicholas&quot;</div><div class=\"line\">instance1.sayAge();       //29var </div><div class=\"line\">instance2 = new SubType(&quot;Greg&quot;, 27);</div><div class=\"line\">alert(instance2.colors);  //&quot;red,blue,green&quot;</div><div class=\"line\">instance2.sayName();      //&quot;Greg&quot;</div><div class=\"line\">instance2.sayAge();       //27</div><div class=\"line\">console.log(instance1);</div><div class=\"line\">console.log(SuperType.prototype);</div></pre></td></tr></table></figure></p>\n<p>代码运行打印结果图：<br><img src=\"../uploads/img12.png\" alt=\"\"><br>从图中可以看到instance1（子类实例）的原型里已经没有了超类的实例属性name、colors。而且代码中只运行了一次超类构造函数。怎么做到的呢？请看下面的解释：<br>我们先看这段代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function inheritPrototype(subType, superType)&#123;</div><div class=\"line\">    var prototype = object(superType.prototype);   //create object</div><div class=\"line\">    prototype.constructor = subType;               //augment object</div><div class=\"line\">    subType.prototype = prototype;                 //assign object</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>subType的原型还是指向了一个对象，这个对象是什么呢？object这个方法返回的对象，这个对象是一个构造函数是空的，原型指向超类原型的实例。什么意思呢？就是说subType的原型还是一个构造函数的实例，但不是超类SuperType的实例，而是一个新建的临时的空的构造函数F的实例。看代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o)&#123;</div><div class=\"line\">    function F()&#123;&#125;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    return new F();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个临时的构造函数F具有和超类SuperType一样的原型。那么这个时候的子类的原型中就只有F的实例属性和原型，而F的实例属性是空的，就只有F的原型，F的原型就是超类SuperType的原型。这样子类的实例属性还是继承了超类的实例属性，而子类的原型属性只继承了超类的原型。完美，就这样。</p>\n<p>啰嗦一句我对面向对象程序设计的理解，面向对象程序设计就是一直在说如何使用对象。其实，只要结果符合你的预期，对象真的是想怎么使用就怎么使用，不一定非得像书中说的什么各种模式的。当然书中的这么多种模式方法的介绍可以了解一下<em>（但是构造函数模式、原型模式。以及继承里的原型链、借用构造函数。还包括它们的组合使用还是需要认真研读，深刻理解的。再顺便说一句，继承里的原型链、借用构造函数可以看作是原型模式和构造函数模式的进化）</em>，可以加深自己对对象的理解，有助于你花式使用对象的方法。哈哈哈</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>读这篇之前，最好是已读过我前面的关于对象的理解和封装类的笔记。</em></p>\n<h2 id=\"一、原型链\"><a href=\"#一、原型链\" class=\"headerlink\" title=\"一、原型链\"></a>一、原型链</h2><p>原型链最简单的理解就是：原型对象指向另一个构造函数的实例。此时的原型对象包括一个指向另一个原型的指针，相应的，另一个原型中的constructor指向另一个构造函数。这种关系层层递进，就通过一个原型对象链接另一个构造函数的原型对象的方式实现了继承。<br>下面用代码和图来详细分析一下原型链中的各种关系：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType()&#123;</div><div class=\"line\">    this.property = true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</div><div class=\"line\">    return this.property;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType()&#123;</div><div class=\"line\">    this.subproperty = false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//inherit from SuperType</div><div class=\"line\">SubType.prototype = new SuperType();</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.getSubValue = function ()&#123;</div><div class=\"line\">    return this.subproperty;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.getSuperValue());   //true</div><div class=\"line\">alert(instance.getSubValue());   //false</div><div class=\"line\">alert(instance instanceof Object);      //true</div><div class=\"line\">alert(instance instanceof SuperType);   //true</div><div class=\"line\">alert(instance instanceof SubType);     //true</div><div class=\"line\"></div><div class=\"line\">alert(Object.prototype.isPrototypeOf(instance));    //true</div><div class=\"line\">alert(SuperType.prototype.isPrototypeOf(instance)); //true</div><div class=\"line\">alert(SubType.prototype.isPrototypeOf(instance));   //true</div><div class=\"line\">console.log(new SuperType());</div><div class=\"line\">console.log(instance);</div></pre></td></tr></table></figure></p>\n<p>下图是上面代码中打印出来的new SuperType()和instance的分析：<br><img src=\"../uploads/img8.png\" alt=\"\"><br>从上面的分析我们看到的原型链：<br>SubType的原型里有指向SuperType的原型的指针，SuperType的原型里有指向Object的原型的指针。<br>也可以看红皮书里的图：<br><img src=\"../uploads/img9.png\" alt=\"\"></p>\n<ul>\n<li>访问属性的搜索过程：<br>当以读取模式访问一个构造函数（SubType）的实例的属性时，首先会在实例中搜索实例属性。如果没找到该属性，则会继续搜索实例的原型；SubType继承了SuperType，那么实例的原型是另一个构造函数（SuperType）的实例，搜索实例的原型也就是在SuperType的实例中搜索该属性，没找到继续搜索SuperType的原型；SuperType继承了Object，以此递进，一层层搜索，直到找到或者搜到了原型链的末端停下来。</li>\n<li>判断原型和实例的关系</li>\n</ul>\n<p>(1)instanceof<br>实例的原型链中出现过待检测的构造函数，就会返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(instance instanceof Object);      //true</div><div class=\"line\">alert(instance instanceof SuperType);   //true</div><div class=\"line\">alert(instance instanceof SubType);     //true</div></pre></td></tr></table></figure></p>\n<p>(2)isPrototypeOf()方法<br>待检测对象出现在instance的原型链中，就会返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(Object.prototype.isPrototypeOf(instance));    //true</div><div class=\"line\">alert(SuperType.prototype.isPrototypeOf(instance)); //true</div><div class=\"line\">alert(SubType.prototype.isPrototypeOf(instance));   //true</div></pre></td></tr></table></figure></p>\n<ul>\n<li>注意事项</li>\n</ul>\n<p>(1)给原型添加方法的代码一定要放在替换原型的语句之后。也就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SubType.prototype = new SuperType();这句代码一定要先写，在写下面的代码</div><div class=\"line\">//new method</div><div class=\"line\">SubType.prototype.getSubValue = function ()&#123;</div><div class=\"line\">    return this.subproperty;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//override existing method</div><div class=\"line\">SubType.prototype.getSuperValue = function ()&#123;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>(2)在通过原型链实现继承时，不能使用对象字面量为原型添加属性，因为这会重写原型链（具体请看理解对象篇里的一、创建对象）。<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType()&#123;</div><div class=\"line\">    this.property = true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</div><div class=\"line\">    return this.property;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType()&#123;</div><div class=\"line\">    this.subproperty = false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//继承了 SuperType</div><div class=\"line\">SubType.prototype = new SuperType();</div><div class=\"line\"></div><div class=\"line\">//使用字面量添加新方法，会导致上一行代码无效</div><div class=\"line\">SubType.prototype = &#123;</div><div class=\"line\">    getSubValue : function ()&#123;</div><div class=\"line\">        return this.subproperty;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    someOtherMethod : function ()&#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.getSuperValue());   //error!</div></pre></td></tr></table></figure></p>\n<p>其实这两个注意事项，只要你明白了（理解对象篇里的一、创建对象）后，根本不需要解释。</p>\n<ul>\n<li>原型链的问题</li>\n</ul>\n<p>(1)没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。</p>\n<p>(2)在另一篇笔记封装类原型模式中提到过，原型中的属性是被共享的，但如果属性的值时引用类型，会有问题的。而在继承时，原型实际上会是另一个类型的实例（这个实例包含引用类型值的实例属性），那么原先的这个实例的实例属性就会成为现在的原型属性了，就会出现同样的问题了。共享了引用类型值的属性。</p>\n<h2 id=\"二、借用构造函数\"><a href=\"#二、借用构造函数\" class=\"headerlink\" title=\"二、借用构造函数\"></a>二、借用构造函数</h2><p>直接上代码吧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType(name)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SubType()&#123; </div><div class=\"line\">    //继承了 SuperType ，同时还传递了参数</div><div class=\"line\">    SuperType.call(this, &quot;Nicholas&quot;);</div><div class=\"line\">   </div><div class=\"line\">    //实例属性</div><div class=\"line\">    this.age = 29;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.name);    //&quot;Nicholas&quot;;</div><div class=\"line\">alert(instance.age);     //29</div></pre></td></tr></table></figure></p>\n<p>如上写法就解决了原型链里的两个问题了，为什么呢？请看下面的讲解：<br><strong>SuperType，如果你用new调用它是构造函数，但你不用new，它就是个普通函数。SuperType.call(this, “Nicholas”);不但传递了参数，还绑定了子类的作用域，就相当于SuperType方法在帮助定义子类的实例属性。也就是说，即使SuperType的中定义的属性里有引用类型值，也不会成为子类SubType的原型属性，仍然时实例属性。我们要时刻记住实例属性是每个实例所私有的，而原型属性是会被所有实例所共享的。</strong></p>\n<p>当然这也写也不完美，问题显而易见，和构造函数模式同样的问题。</p>\n<h2 id=\"三、组合继承\"><a href=\"#三、组合继承\" class=\"headerlink\" title=\"三、组合继承\"></a>三、组合继承</h2><p>组合继承，就像是封装类里的把构造函数模式和原型模式组合使用是一样的。这里是把原型链和借用构造函数相组合。<br>简单来说就是：<strong>使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承（父类的实例属性变成子类的实例属性）。</strong><br>还是上代码吧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType(name)&#123;</div><div class=\"line\">    this.name = name;    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function()&#123;</div><div class=\"line\">    alert(this.name);&#125;;function SubType(name, age)&#123; </div><div class=\"line\">    SuperType.call(this, name);       this.age = age;&#125;</div><div class=\"line\"></div><div class=\"line\">SubType.prototype = new SuperType();SubType.prototype.sayAge = function()&#123;</div><div class=\"line\">    alert(this.age);&#125;;var instance1 = new SubType(&quot;Nicholas&quot;, 29);instance1.colors.push(&quot;black&quot;);alert(instance1.colors);  //&quot;red,blue,green,black&quot;instance1.sayName();      //&quot;Nicholas&quot;;instance1.sayAge();       //29</div><div class=\"line\">var instance2 = new SubType(&quot;Greg&quot;, 27);alert(instance2.colors);  //&quot;red,blue,green&quot;instance2.sayName();      //&quot;Greg&quot;;instance2.sayAge();       //27</div></pre></td></tr></table></figure></p>\n<p>解释:<br>下图是instance1的打印<br><img src=\"../uploads/img10.png\" alt=\"\"><br><strong>我们可以看到instance1具有了父类SuperType的实例属性name 、colors，但是子类的原型是父类的实例，所以原型中仍存在父类的实例属性，但是子类已经有了同样的实例属性name和colors，所以子类原型中的这两个属性就被屏蔽了。从子类访问它的name和colors属性只会访问到它的实例属性。</strong></p>\n<p>组合继承是javaScript中最常用的继承模式。而且instance和isPrototypeOf()也能够用于识别给予组合继承创建的对象类型。</p>\n<h2 id=\"四、原型式继承\"><a href=\"#四、原型式继承\" class=\"headerlink\" title=\"四、原型式继承\"></a>四、原型式继承</h2><p>感兴趣可以了解一下。<br>原型链中，我们是让原型对象指向一个构造函数的实例，这个实例本质上就是一个对象。原型式继承就是让原型对象指向一个已有的对象，不必创建自定义类型。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o)&#123;</div><div class=\"line\">    function F()&#123;&#125;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    return new F();</div><div class=\"line\">&#125;</div><div class=\"line\">var person = &#123;</div><div class=\"line\">    name: &quot;Nicholas&quot;,</div><div class=\"line\">    friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var anotherPerson = object(person);</div><div class=\"line\">anotherPerson.name = &quot;Greg&quot;;</div><div class=\"line\">anotherPerson.friends.push(&quot;Rob&quot;);</div><div class=\"line\"></div><div class=\"line\">var yetAnotherPerson = object(person);</div><div class=\"line\">yetAnotherPerson.name = &quot;Linda&quot;;</div><div class=\"line\">yetAnotherPerson.friends.push(&quot;Barbie&quot;);</div><div class=\"line\">console.log(person.friends);   //&quot;Shelby,Court,Van,Rob,Barbie”</div></pre></td></tr></table></figure></p>\n<p>大家还记得原型模式吗。我的理解：这就是一个原型模式，区别是object这个方法就相当于一个工厂，你传给它一个对象，它就给你一个原型是这个对象的实例。这个实例就会相应的继承到了你传给它的那个对象的属性。<br>当然你也可以不用自己写上面的object这个方法，因为ES5提供了，而且更规范。ES5中新增了<code>Object.create()</code>方法规范化了原型式继承。这个方法接受两个参数：一个是用做新对象原型的对象和（可选）一个为新对象定义额外属性的对象<em>(或者说是定义新对象的实例属性的对象，这个参数和defineProperties()方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的)</em>。<br>上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = &#123;</div><div class=\"line\">    name: &quot;Nicholas&quot;,</div><div class=\"line\">    friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\">&#125;;</div><div class=\"line\">                  </div><div class=\"line\">var anotherPerson = Object.create(person, &#123;</div><div class=\"line\">    name: &#123;</div><div class=\"line\">        value: &quot;Greg&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(anotherPerson);</div></pre></td></tr></table></figure></p>\n<p>打印结果图：<br><img src=\"../uploads/img11.png\" alt=\"\"><br>从上图可以看到第二个参数定义的name属性是新对象的实例属性，它会屏蔽掉它的原型属性里的同名属性name。简单来说，Object.create就是用原型模式创建新对象的一个工厂，第一个参数定义了原型属性，第二个参数定义了实例属性。</p>\n<h2 id=\"五、寄生式继承\"><a href=\"#五、寄生式继承\" class=\"headerlink\" title=\"五、寄生式继承\"></a>五、寄生式继承</h2><p>这一小节，感兴趣了解一下。</p>\n<h2 id=\"六、寄生组合式继承\"><a href=\"#六、寄生组合式继承\" class=\"headerlink\" title=\"六、寄生组合式继承\"></a>六、寄生组合式继承</h2><p><strong>前面说过，组合继承是js里最常用的继承模式，但是它并不完美。问题是：调用了两次超类SuperType的构造函数，子类创建了一部分多余的属性（这部分属性是超类的实例属性，在子类的实例属性里存在并有用，但在子类的原型中也存在且没用）。寄生组合式继承就是解决这个问题的。</strong><br>上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o)&#123;</div><div class=\"line\">    function F()&#123;&#125;</div><div class=\"line\">    F.prototype = o;    </div><div class=\"line\">    return new F();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function inheritPrototype(subType, superType)&#123;</div><div class=\"line\">    var prototype = object(superType.prototype);   //create object    </div><div class=\"line\">    prototype.constructor = subType;               //augment object    </div><div class=\"line\">    subType.prototype = prototype;                 //assign object</div><div class=\"line\">&#125;</div><div class=\"line\">                       </div><div class=\"line\">function SuperType(name)&#123;</div><div class=\"line\">    this.name = name;    </div><div class=\"line\">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function()&#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">function SubType(name, age)&#123; </div><div class=\"line\">    SuperType.call(this, name);</div><div class=\"line\">    this.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(SubType, SuperType);</div><div class=\"line\">SubType.prototype.sayAge = function()&#123;</div><div class=\"line\">    alert(this.age);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance1 = new SubType(&quot;Nicholas&quot;, 29);</div><div class=\"line\">instance1.colors.push(&quot;black&quot;);</div><div class=\"line\">alert(instance1.colors);  //&quot;red,blue,green,black&quot;</div><div class=\"line\">instance1.sayName();      //&quot;Nicholas&quot;</div><div class=\"line\">instance1.sayAge();       //29var </div><div class=\"line\">instance2 = new SubType(&quot;Greg&quot;, 27);</div><div class=\"line\">alert(instance2.colors);  //&quot;red,blue,green&quot;</div><div class=\"line\">instance2.sayName();      //&quot;Greg&quot;</div><div class=\"line\">instance2.sayAge();       //27</div><div class=\"line\">console.log(instance1);</div><div class=\"line\">console.log(SuperType.prototype);</div></pre></td></tr></table></figure></p>\n<p>代码运行打印结果图：<br><img src=\"../uploads/img12.png\" alt=\"\"><br>从图中可以看到instance1（子类实例）的原型里已经没有了超类的实例属性name、colors。而且代码中只运行了一次超类构造函数。怎么做到的呢？请看下面的解释：<br>我们先看这段代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function inheritPrototype(subType, superType)&#123;</div><div class=\"line\">    var prototype = object(superType.prototype);   //create object</div><div class=\"line\">    prototype.constructor = subType;               //augment object</div><div class=\"line\">    subType.prototype = prototype;                 //assign object</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>subType的原型还是指向了一个对象，这个对象是什么呢？object这个方法返回的对象，这个对象是一个构造函数是空的，原型指向超类原型的实例。什么意思呢？就是说subType的原型还是一个构造函数的实例，但不是超类SuperType的实例，而是一个新建的临时的空的构造函数F的实例。看代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o)&#123;</div><div class=\"line\">    function F()&#123;&#125;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    return new F();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个临时的构造函数F具有和超类SuperType一样的原型。那么这个时候的子类的原型中就只有F的实例属性和原型，而F的实例属性是空的，就只有F的原型，F的原型就是超类SuperType的原型。这样子类的实例属性还是继承了超类的实例属性，而子类的原型属性只继承了超类的原型。完美，就这样。</p>\n<p>啰嗦一句我对面向对象程序设计的理解，面向对象程序设计就是一直在说如何使用对象。其实，只要结果符合你的预期，对象真的是想怎么使用就怎么使用，不一定非得像书中说的什么各种模式的。当然书中的这么多种模式方法的介绍可以了解一下<em>（但是构造函数模式、原型模式。以及继承里的原型链、借用构造函数。还包括它们的组合使用还是需要认真研读，深刻理解的。再顺便说一句，继承里的原型链、借用构造函数可以看作是原型模式和构造函数模式的进化）</em>，可以加深自己对对象的理解，有助于你花式使用对象的方法。哈哈哈</p>\n"},{"title":"跨域","date":"2017-08-22T06:51:50.000Z","_content":"* jsonp\njsonp解决跨域问题的本质：` <script> ` 标签可以请求不同域名下的资源，即` <script> `请求不受浏览器同源策略影响。\n首先给body动态添加一个` <script> `\n```\n      var script = document.createElement('script');\n      script.setAttribute(\"type\",\"text/javascript\");\n      script.src = 'http://example.com/ip?callback=foo';\n      document.body.appendChild(script);\n\n      function foo(data) {\n        console.log('Your public IP address is: ' + data.ip);\n      };\n```\n上面的script会向` http://example.com/ `服务器发送请求，这个请求的url后面带了个callback参数，是用来告诉服务器回调方法的方法名的。因为服务器收到请求后，会把相应数据写进foo的参数位置，也就是说服务器会返回的脚本如下\n```\n  foo({\n      \"ip\": \"8.8.8.8\"\n   });\n```\n这样浏览器通过`<script>`下载的资源就是上面的脚本了，`<script>`下载完成就会立即执行，也就是说`http://example.com/ip?callback=foo`这个请求返回后就会立即执行上面的脚本代码，而这个脚本代码就是调用回调方法和拿到json数据了。\n\n接下来我会总结cors，iframe，Access-Control-Allow-Origin等实现跨域访问方法，后续总结请稍候。。。","source":"_posts/跨域.md","raw":"---\ntitle: 跨域\ndate: 2017-08-22 14:51:50\ntags: 随笔\n---\n* jsonp\njsonp解决跨域问题的本质：` <script> ` 标签可以请求不同域名下的资源，即` <script> `请求不受浏览器同源策略影响。\n首先给body动态添加一个` <script> `\n```\n      var script = document.createElement('script');\n      script.setAttribute(\"type\",\"text/javascript\");\n      script.src = 'http://example.com/ip?callback=foo';\n      document.body.appendChild(script);\n\n      function foo(data) {\n        console.log('Your public IP address is: ' + data.ip);\n      };\n```\n上面的script会向` http://example.com/ `服务器发送请求，这个请求的url后面带了个callback参数，是用来告诉服务器回调方法的方法名的。因为服务器收到请求后，会把相应数据写进foo的参数位置，也就是说服务器会返回的脚本如下\n```\n  foo({\n      \"ip\": \"8.8.8.8\"\n   });\n```\n这样浏览器通过`<script>`下载的资源就是上面的脚本了，`<script>`下载完成就会立即执行，也就是说`http://example.com/ip?callback=foo`这个请求返回后就会立即执行上面的脚本代码，而这个脚本代码就是调用回调方法和拿到json数据了。\n\n接下来我会总结cors，iframe，Access-Control-Allow-Origin等实现跨域访问方法，后续总结请稍候。。。","slug":"跨域","published":1,"updated":"2017-10-19T02:02:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zl8v9h0009ssejdkwzh9if","content":"<ul>\n<li>jsonp<br>jsonp解决跨域问题的本质：<code>&lt;script&gt;</code> 标签可以请求不同域名下的资源，即<code>&lt;script&gt;</code>请求不受浏览器同源策略影响。<br>首先给body动态添加一个<code>&lt;script&gt;</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var script = document.createElement(&apos;script&apos;);</div><div class=\"line\">script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);</div><div class=\"line\">script.src = &apos;http://example.com/ip?callback=foo&apos;;</div><div class=\"line\">document.body.appendChild(script);</div><div class=\"line\"></div><div class=\"line\">function foo(data) &#123;</div><div class=\"line\">  console.log(&apos;Your public IP address is: &apos; + data.ip);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的script会向<code>http://example.com/</code>服务器发送请求，这个请求的url后面带了个callback参数，是用来告诉服务器回调方法的方法名的。因为服务器收到请求后，会把相应数据写进foo的参数位置，也就是说服务器会返回的脚本如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(&#123;</div><div class=\"line\">    &quot;ip&quot;: &quot;8.8.8.8&quot;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>这样浏览器通过<code>&lt;script&gt;</code>下载的资源就是上面的脚本了，<code>&lt;script&gt;</code>下载完成就会立即执行，也就是说<code>http://example.com/ip?callback=foo</code>这个请求返回后就会立即执行上面的脚本代码，而这个脚本代码就是调用回调方法和拿到json数据了。</p>\n<p>接下来我会总结cors，iframe，Access-Control-Allow-Origin等实现跨域访问方法，后续总结请稍候。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>jsonp<br>jsonp解决跨域问题的本质：<code>&lt;script&gt;</code> 标签可以请求不同域名下的资源，即<code>&lt;script&gt;</code>请求不受浏览器同源策略影响。<br>首先给body动态添加一个<code>&lt;script&gt;</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var script = document.createElement(&apos;script&apos;);</div><div class=\"line\">script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);</div><div class=\"line\">script.src = &apos;http://example.com/ip?callback=foo&apos;;</div><div class=\"line\">document.body.appendChild(script);</div><div class=\"line\"></div><div class=\"line\">function foo(data) &#123;</div><div class=\"line\">  console.log(&apos;Your public IP address is: &apos; + data.ip);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的script会向<code>http://example.com/</code>服务器发送请求，这个请求的url后面带了个callback参数，是用来告诉服务器回调方法的方法名的。因为服务器收到请求后，会把相应数据写进foo的参数位置，也就是说服务器会返回的脚本如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(&#123;</div><div class=\"line\">    &quot;ip&quot;: &quot;8.8.8.8&quot;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>这样浏览器通过<code>&lt;script&gt;</code>下载的资源就是上面的脚本了，<code>&lt;script&gt;</code>下载完成就会立即执行，也就是说<code>http://example.com/ip?callback=foo</code>这个请求返回后就会立即执行上面的脚本代码，而这个脚本代码就是调用回调方法和拿到json数据了。</p>\n<p>接下来我会总结cors，iframe，Access-Control-Allow-Origin等实现跨域访问方法，后续总结请稍候。。。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj8zl8v8v0000ssej127s8j4e","tag_id":"cj8zl8v950002ssejaxq20bbp","_id":"cj8zl8v9e0007ssej44mlz7zm"},{"post_id":"cj8zl8v910001ssejlmed0y7p","tag_id":"cj8zl8v9d0006ssejntjkbt3i","_id":"cj8zl8v9l000bssejsszkdy0u"},{"post_id":"cj8zl8v9h0009ssejdkwzh9if","tag_id":"cj8zl8v950002ssejaxq20bbp","_id":"cj8zl8v9l000cssejp4x45g4x"},{"post_id":"cj8zl8v990003ssejmmz39uvq","tag_id":"cj8zl8v950002ssejaxq20bbp","_id":"cj8zl8v9n000essejh22zpmw7"},{"post_id":"cj8zl8v9b0004sseju94lhn3w","tag_id":"cj8zl8v9l000dssejge5zfprl","_id":"cj8zl8v9o000gssejyfbxwnzc"},{"post_id":"cj8zl8v9c0005ssej8bzxrfm4","tag_id":"cj8zl8v9l000dssejge5zfprl","_id":"cj8zl8v9p000issejmpp5o2ou"},{"post_id":"cj8zl8v9f0008ssejyxb8h3cq","tag_id":"cj8zl8v9l000dssejge5zfprl","_id":"cj8zl8v9p000jssejzv06bkh3"}],"Tag":[{"name":"随笔","_id":"cj8zl8v950002ssejaxq20bbp"},{"name":"CSS","_id":"cj8zl8v9d0006ssejntjkbt3i"},{"name":"js","_id":"cj8zl8v9l000dssejge5zfprl"}]}}